#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $execDir = "$ENV{HOME}/Games/stepmania/latest/";
my $exec = "$execDir/stepmania";
my $confDir = "$ENV{HOME}/.stepmania-5.3";
my $songsDir = "$execDir/Songs";

my $saveDir = "$confDir/Save";
my $machineProfileDir = "$confDir/Save/MachineProfile";

my $defaultSpeedMod = "m650";
my $defaultScreen = 'ScreenSelectMusic';

my $selectedSongCacheFile = "$ENV{HOME}/.cache/stepmania-selected-song";

my $prefs = {
  'Options' => {
    GlobalOffsetSeconds       => "-0.067",
    AutoMapOnJoyChange        => 0,
    OnlyDedicatedMenuButtons  => 1,
    Center1Player             => 1,
    EventMode                 => 1,
    BGBrightness              => '0.800000',
    ShowSongOptions           => 'Ask',
    ShowCaution               => 0,
    ShowInstructions          => 0,
    ShowNativeLanguage        => 0,
    UseOldJoystickMapping     => 1,

    SoundDrivers              => 'Pulse',

    Windowed                  => 1,
    DisplayWidth              => 928,
    DisplayHeight             => 696,
    DisplayAspectRatio        => 1.3333,
    RefreshRate               => 60,

    DisplayColorDepth         => 16,
    MaxTextureResolution      => 1024,

    LastSeenVideoDriver       => 'OpenGL',
    VideoRenderers            => 'opengl',
  },
  'Game-dance' => {
    Announcer                 => '', #MAX2
  },
};

my $outfoxPrefs = {
  ComboIsPerRow => "true",      #default is false
  SmartTimings => "DDR",        #default is Original
};

my $fallbackMetricsPrefs = {
  'Common' => {
    DefaultModifiers          => "\"$defaultSpeedMod\"",
  },
};

my $fullscreenUpCmd = "
  xrandr -s $$prefs{Options}{DisplayWidth}x$$prefs{Options}{DisplayHeight}
  xrandr --output LVDS1 --set 'scaling mode' 'Full'
";
my $fullscreenDownCmd = "
  xrandr -s 0
  xrandr --output LVDS1 --set 'scaling mode' 'Full Aspect'
";

my $themePrefs = {
  'StepMania 5 Default' => {
    'GameplayShowScore' => 'true',
  }
};

my $keyArgs = {
  joy1Name  => "ltek",
  joy2Name  => "cf",
  joy1Index => 1,
  joy2Index => 2,
  kb1Name   => "kb1",
  kb2Name   => "kb2",
};

my $jsKeyGrid = {
            ##  LT DN UP RT  ML MD MU MR  BK ST
  ltek      => "05 02 06 01  00 00 00 00  00 00",
  ltekorig  => "01 04 03 02  00 00 00 00  00 00",
  omegaitgx => "03 02 01 04  00 00 00 00  00 00",
  cf        => "16 15 13 14  03 04 01 02  00 00",
  redoctane => "01 02 03 04  07 06 05 08  10 09",
  redbroke  => "01 02 03 04  00 00 00 00  10 09",
  ems       => "16 15 13 14  03 04 01 02  09 10",
  energy    => "03 02 01 04  07 06 05 08  09 10",
};
my $kbKeyGrid = {
            ##  LT DN UP RT  ML     MD     MU     MR     BK     ST
  kb1       => "d  f  j  k   left   down   up     right  escape enter",
  kb2       => "e  r  u  i   home   pgdn   pgup   end    period /",
};
my $keyGrid = {%$jsKeyGrid, %$kbKeyGrid};
my @jsNames = sort keys %$jsKeyGrid;

my @okScreens = qw(
  ScreenTitleMenu
  ScreenSelectMusic
  ScreenMapControllers
  ScreenEditMenu
  ScreenTestInput
  ScreenHowToPlay
  ScreenDemonstration
  ScreenReloadSongs
);
my %okScreensHash = map {$_ => 1} @okScreens;

my $patches = {
  # print songtype, difficulty, and SM file on ScreenSelectMusic
  "$execDir/Appearance/Themes/default/BGAnimations/ScreenSelectMusic decorations/panels.lua" => ''
    . '*** panels.lua.orig	2020-11-24 11:46:36.518666321 -0500' . "\n"
    . '--- panels.lua.printsongselect	2020-11-24 11:46:27.463459477 -0500' . "\n"
    . '***************' . "\n"
    . '*** 133,138 ****' . "\n"
    . '--- 133,139 ----' . "\n"
    . '  						local cd = GetCustomDifficulty(st, diff, courseType);' . "\n"
    . '  						self:finishtweening():linear(0.2)' . "\n"
    . '  						self:diffuse(ColorMidTone(CustomDifficultyToColor(cd)))'
         . ':diffuseleftedge(BoostColor(ColorMidTone(CustomDifficultyToColor(cd)),1.2))'
         . ':diffusealpha(0.5);' . "\n"
    . '+ 						print(st .. "%%%" .. diff .. "%%%" .. song:GetSongFilePath());' . "\n"
    . '  					else' . "\n"
    . '  					end' . "\n"
    . '  				else' . "\n"
  ,
  #screen filter 0 => 0.5
  "$execDir/Appearance/Themes/default/Modules/Options.Prefs.lua" => ''
    . "*** Options.Prefs.lua.orig	2020-11-27 18:40:29.889702851 -0500\n"
    . "--- Options.Prefs.lua.filter	2020-11-27 18:40:43.223023483 -0500\n"
    . "***************\n"
    . "*** 140,146 ****\n"
    . "  	ScreenFilter =\n"
    . "  	{\n"
    . "  		UserPref = true,\n"
    . "! 		Default = 0,\n"
    . "  		Choices = { THEME:GetString('OptionNames','Off'), '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0' },\n"
    . "  		Values = { 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 },\n"
    . "      },\n"
    . "--- 140,146 ----\n"
    . "  	ScreenFilter =\n"
    . "  	{\n"
    . "  		UserPref = true,\n"
    . "! 		Default = 0.5,\n"
    . "  		Choices = { THEME:GetString('OptionNames','Off'), '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1.0' },\n"
    . "  		Values = { 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1 },\n"
    . "      },\n"
  ,
  #remove up-up/down-down pad codes for next/prev difficulty
  "$execDir/Appearance/Themes/_fallback/Scripts/03 Gameplay.lua" => ''
    . '*** gameplay-lua.orig	2020-12-13 19:00:57.638163262 -0500' . "\n"
    . '--- gameplay-lua.no-codes	2020-12-13 19:01:36.205116884 -0500' . "\n"
    . '***************' . "\n"
    . '*** 250,256 ****' . "\n"
    . '  	-- steps' . "\n"
    . '  	PrevSteps1 = {' . "\n"
    . '  		default = "",' . "\n"
    . '! 		dance = "Up,Up",' . "\n"
    . '  		pump = "+UpLeft",' . "\n"
    . '  	},' . "\n"
    . '  	PrevSteps2 = {' . "\n"
    . '--- 250,256 ----' . "\n"
    . '  	-- steps' . "\n"
    . '  	PrevSteps1 = {' . "\n"
    . '  		default = "",' . "\n"
    . '! 		dance = "",' . "\n"
    . '  		pump = "+UpLeft",' . "\n"
    . '  	},' . "\n"
    . '  	PrevSteps2 = {' . "\n"
    . '***************' . "\n"
    . '*** 260,266 ****' . "\n"
    . '  	},' . "\n"
    . '  	NextSteps1 = {' . "\n"
    . '  		default = "",' . "\n"
    . '! 		dance = "Down,Down",' . "\n"
    . '  		pump = "+UpRight",' . "\n"
    . '  	},' . "\n"
    . '  	NextSteps2 = {' . "\n"
    . '--- 260,266 ----' . "\n"
    . '  	},' . "\n"
    . '  	NextSteps1 = {' . "\n"
    . '  		default = "",' . "\n"
    . '! 		dance = "",' . "\n"
    . '  		pump = "+UpRight",' . "\n"
    . '  	},' . "\n"
    . '  	NextSteps2 = {' . "\n"
};

sub generateKeymap($$);
sub readLines($);
sub writeLines($@);
sub readConf($);
sub writeConf($);
sub modifyConf($$);
sub replaceConf($$);
sub patchFile($$);
sub editExistingLuaPrefs($$);
sub nowMillis();

my $usage = "Usage:
  $0 -h|--help
    Print this message
  $0 [OPTS]
    Launch stepmania after setting up preferences
  $0 <JOYNAME> <JS#> [<OPTS>]
    shorthand for:
      --js1Name=<JSNAME> --js1=<JS#> <OPTS>
  $0 <JOYNAME> <JS#> <JOYNAME> <JS#> [<OPTS>]
    shorthand for:
      --js1Name=<JSNAME> --js1=<JS#> --js2Name=<JSNAME> --js2=<JS#> <OPTS>
  OPTS:
   --js1Name=JOYNAME p1 joystick name {default=$$keyArgs{joy1Name}}
   --js2Name=JOYNAME p2 joystick name {default=$$keyArgs{joy2Name}}
   --js1=JS#         p1 joystick index {default=$$keyArgs{joy1Index}}
   --js2=JS#         p2 joystick index {default=$$keyArgs{joy2Index}}
   --itg             add 9ms to GlobalOffsetSeconds (i.e.: decrease the audio delay)
   -m                run `stepmania-cursong-info --monitor` using `term-window`
   --res=WxH         set DisplayWidth to W and DisplayHeight to H, overriding config
                       W can be in pixels, or percent of screen width e.g.: '1824' or '95%'
                       H can be in pixels, or percent of screen height e.g.: '1080' or '100%'
                       `res` command is used to calculate screen width/height
   -r                same as --res=100%x95%
   -w                set Windowed to 1, overriding config
   -f                set Windowed to 0, overriding config
   --screen=SCREEN   jump to screen SCREEN {default=$defaultScreen}
   -i                synonynm for --screen=ScreenTestInput

  JOYNAME: user-defined joystick name, one of:
           [@jsNames]
  SCREEN:  screen class name, one of:
           [@okScreens]
  JS#:     integer for internal stepmania joystick index
";

my $prefsIni = "$saveDir/Preferences.ini";
my $themePrefsIni = "$saveDir/ThemePrefs.ini";
my $keymapsIni = "$saveDir/Keymaps.ini";
my $outfoxPrefsIni = "$saveDir/OutFoxPrefs.ini";
my $fallbackMetricsIni = "$execDir/Appearance/Themes/_fallback/metrics.ini";

sub main(@){
  die $usage if @_ == 1 and $_[0] =~ /^(-h|--help)$/;
  chdir $execDir;

  if(not -l $songsDir){
    die "ERROR: $songsDir is not a symlink\n";
  }

  if(@_ >= 2 and defined $$jsKeyGrid{$_[0]} and $_[1] =~ /^\d+$/){
    $$keyArgs{joy1Name} = shift;
    $$keyArgs{joy1Index} = shift;
  }
  if(@_ >= 2 and defined $$jsKeyGrid{$_[0]} and $_[1] =~ /^\d+$/){
    $$keyArgs{joy2Name} = shift;
    $$keyArgs{joy2Index} = shift;
  }

  my $openMonitorTerm = 0;
  $$prefs{Options}{TestInitialScreen} = $defaultScreen;
  my $targetDisplayWidth = undef;
  my $targetDisplayHeight = undef;
  for(my $i=0; $i<@_; $i++){
    if($_[$i] =~ /--js1Name=(.+)/ and defined $$jsKeyGrid{$1}){
      $$keyArgs{joy1Name} = $1;
    }elsif($_[$i] =~ /--js2Name=(.+)/ and defined $$jsKeyGrid{$1}){
      $$keyArgs{joy2Name} = $1;
    }elsif($_[$i] =~ /--js1=(\d+)/){
      $$keyArgs{joy1Index} = $1;
    }elsif($_[$i] =~ /--js2=(\d+)/){
      $$keyArgs{joy2Index} = $1;
    }elsif($_[$i] eq '--itg'){
      $$prefs{Options}{GlobalOffsetSeconds} += 0.009;
    }elsif($_[$i] eq '-m'){
      $openMonitorTerm = 1;
    }elsif($_[$i] =~ /^--res=(\d+%?)x(\d+%?)$/){
      ($targetDisplayWidth, $targetDisplayHeight) = ($1, $2);
    }elsif($_[$i] eq '-r'){
      ($targetDisplayWidth, $targetDisplayHeight) = ("100%", "95%");
    }elsif($_[$i] eq '-w'){
      $$prefs{Options}{Windowed} = 1;
    }elsif($_[$i] eq '-f'){
      $$prefs{Options}{Windowed} = 0;
    }elsif($_[$i] =~ /--screen=(.+)/ and defined $okScreensHash{$1}){
      $$prefs{Options}{TestInitialScreen} = $1;
    }elsif($_[$i] eq '-i'){
      $$prefs{Options}{TestInitialScreen} = 'ScreenTestInput';
    }else{
      die $usage;
    }
  }

  if(defined $targetDisplayWidth and $targetDisplayWidth =~ /^(\d+)%$/){
    $targetDisplayWidth = `res -w --percent=$1`;
    chomp $targetDisplayWidth;
    die "ERROR: `res` command failed\n" if $targetDisplayWidth !~ /^\d+$/;
  }
  if(defined $targetDisplayHeight and $targetDisplayHeight =~ /^(\d+)%$/){
    $targetDisplayHeight = `res -h --percent=$1`;
    chomp $targetDisplayHeight;
    die "ERROR: `res` command failed\n" if $targetDisplayHeight !~ /^\d+$/;
  }

  $$prefs{Options}{DisplayWidth} = $targetDisplayWidth if defined $targetDisplayWidth;
  $$prefs{Options}{DisplayHeight} = $targetDisplayHeight if defined $targetDisplayHeight;

  system "mkdir", "-p", "$saveDir";
  replaceConf $prefsIni, $prefs;
  replaceConf $themePrefsIni, $themePrefs;
  replaceConf $keymapsIni, generateKeymap($keyGrid, $keyArgs);

  my @outfoxPrefsLines = `cat $outfoxPrefsIni 2>/dev/null`;
  for my $key(sort keys %$outfoxPrefs){
    my $val = $$outfoxPrefs{$key};
    my $found = 0;
    for my $line(@outfoxPrefsLines){
      if($line =~ /^$key=(.*)/){
        $found = 1;
        my $oldVal = $1;
        if($oldVal ne $val){
          print "outfox-prefs $key \"$oldVal\" => \"$val\"\n";
        }
        $line = "$key=$val\n";
      }
    }
    if(not $found){
      print "outfox-prefs $key \"\" => \"$val\"\n";
      push @outfoxPrefsLines, "$key=$val\n";
    }
  }
  open FH, ">", $outfoxPrefsIni or die "ERROR: could not write $outfoxPrefsIni\n";
  print FH $_ foreach @outfoxPrefsLines;
  close FH;

  replaceConf $fallbackMetricsIni, $fallbackMetricsPrefs;

  for my $file(sort keys %$patches){
    my $patch = $$patches{$file};
    patchFile($file, $patch);
  }

  if($openMonitorTerm){
    system "term-window", "--right", "--size=25", "stepmania-cursong-info --monitor";
  }

  my $fullscreen = $$prefs{Options}{Windowed} == 0;
  system "bash", "-c", $fullscreenUpCmd if $fullscreen;
  open CMD, "-|", $exec;
  while(my $line = <CMD>){
    print $line;
    if(not $fullscreen and $line =~ /^Display:/){
      system "xdotool",
         "search", "--classname", '^StepMania 5$',
         "windowunmap",
         "windowmap",
         "windowsize", $$prefs{Options}{DisplayWidth}, $$prefs{Options}{DisplayHeight},
         "windowmove", 100, 100,
         ;
    }
    if($line =~ /^(StepsType_\w+)%%%(Difficulty_\w+)%%%(.+)$/){
      open SEL_FH, "> $selectedSongCacheFile"
        or print STDERR "WARNING: could not write $selectedSongCacheFile\n$!\n";
      print SEL_FH $line;
      close SEL_FH;
    }
  }
  close CMD;
  system "bash", "-c", $fullscreenDownCmd if $fullscreen;
}

sub generateKeymap($$){
  my ($keyGrid, $keyArgs) = @_;

  my @buttonOrder = qw(
   Left Down Up Right
   MenuLeft MenuDown MenuUp MenuRight
   Back Start
  );

  my $keys = {};
  for my $name(keys %$keyGrid){
    my @btns = split /\s+/, $$keyGrid{$name};
    die "error parsing keyGrid for $name\n" if @btns != @buttonOrder;
    $$keys{$name} = {};
    for(my $i=0; $i<@buttonOrder; $i++){
      $$keys{$name}{$buttonOrder[$i]} = $btns[$i];
    }
  }

  my %keymap;
  for my $player((1, 2)){
    my $joyName = $player == 1 ? $$keyArgs{joy1Name} : $$keyArgs{joy2Name};
    my $joyIndex = $player == 1 ? $$keyArgs{joy1Index} : $$keyArgs{joy2Index};
    my $kbName = $player == 1 ? $$keyArgs{kb1Name} : $$keyArgs{kb2Name};
    die "Unknown joy config: $joyName\n" if not defined $$keys{$joyName};
    die "Unknown kb config: $kbName\n" if not defined $$keys{$kbName};

    for my $btn(@buttonOrder){
      my $joyBtn = $$keys{$joyName}{$btn};
      die "Non-integer joy button\n" if $joyBtn !~ /^\d+$/;
      $joyBtn = int($joyBtn);
      $joyBtn = undef if $joyBtn == 0;

      my $kbBtn = $$keys{$kbName}{$btn};

      my @keys;
      push @keys, "Joy${joyIndex}_Button $joyBtn" if defined $joyBtn;
      push @keys, "Key_$kbBtn" if defined $kbBtn;
      $keymap{"${player}_$btn"} = join ":", @keys;
    }
  }
  return {'dance' => \%keymap};
}

sub readLines($){
  my $file = shift;
  open FH, "< $file" or die "Could not read $file\n";
  my @lines = <FH>;
  close FH;
  return @lines;
}

sub writeLines($@){
  my ($file, @lines) = @_;
  open FH, "> $file" or die "Could not write $file\n";
  print FH @lines;
  close FH;
}

sub readConf($){
  my $s = shift();
  my $conf = {};
  my $confSection;
  for my $line(split /[\n\r]+/, $s){
    if($line =~ /^\[(.*)\]$/){
      $confSection = {};
      ${$conf}{$1} = $confSection;
    }elsif($line =~ /^(.*)=(.*)$/){
      $$confSection{$1} = $2;
    }
  }
  return $conf;
}

sub writeConf($){
  my %conf = %{shift()};
  my $s = '';
  for my $section(sort keys %conf){
    $s .= "[$section]\n";
    my $sectionConf = $conf{$section};
    for my $key(sort keys %$sectionConf){
      $s .= "$key=${$sectionConf}{$key}\n";
    }
    $s .= "\n";
  }
  return $s;
}

sub modifyConf($$){
  my %orig = %{shift()};
  my %changes = %{shift()};
  for my $section(keys %changes){
    if(not defined $orig{$section}){
      $orig{$section} = $changes{$section};
    }else{
      my $origSectionConf = $orig{$section};
      my $changesSectionConf = $changes{$section};
      for my $key(keys %$changesSectionConf){
        ${$origSectionConf}{$key} = ${$changesSectionConf}{$key};
      }
    }
  }
  return \%orig;
}

sub replaceConf($$){
  my $file = shift;
  my $changes = shift;
  $file =~ s/"/\\"/g;
  my $conf = readConf `cat "$file"`;
  my $content = writeConf(modifyConf($conf, $changes));
  open FH, "> $file" or die "Couldnt open $file for writing.\n";
  print FH $content;
  close FH;
}

sub patchFile($$){
  my ($file, $patch) = @_;
  my $patchFile = "/tmp/stepmania-patch-file-" . nowMillis() . ".patch";
  open FH, "> $patchFile" or die "ERROR: could not write $patchFile\n$!\n";
  print FH $patch;
  close FH;

  system "patch",
    "--silent",
    "--force",         #dont ask questions, just fail
    "--reject-file=-", #ignore rejects
    "--reverse",       #in case already applied
    $file,
    $patchFile,
  ;

  system "patch",
    "--silent",
    "--force",         #dont ask questions, just fail
    "--reject-file=-", #ignore rejects
    $file,
    $patchFile,
  ;
}

sub editExistingLuaPrefs($$){
  my ($file, $prefs) = @_;
  if(not -f $file){
    print "\n\nWARNING: missing $file\n";
    return;
  }
  my @lines = readLines $file;
  my $oldContents = join "", @lines;
  for my $key(sort keys %$prefs){
    my $val = $$prefs{$key};
    for my $line(@lines){
      if($line =~ s/(\s*)($key)(\s*)=(\s*)("[^"]*"|[^,]*)(,?)$/$1$key$3=$4$val$6/){
        last;
      }
    }
  }
  my $newContents = join "", @lines;
  if($oldContents ne $newContents){
    writeLines $file, @lines;
  }
}

sub nowMillis(){
  return int(time*1000.0 + 0.5);
}

&main(@ARGV);
