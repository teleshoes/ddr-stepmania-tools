#!/usr/bin/perl
use strict;
use warnings;

my $smExecDir = "$ENV{HOME}/Desktop/Games/stepmania/StepMania-5.0";
my $prefsDir = "$ENV{HOME}/.stepmania-5.0/Save";

my $prefsIni = "$prefsDir/Preferences.ini";
my $keymapsIni = "$prefsDir/Keymaps.ini";

my $prefs = {
 Options => {
    AutoMapOnJoyChange       => 0,
    OnlyDedicatedMenuButtons => 1,
    Center1Player            => 1,
    EventMode                => 1,
    BGBrightness             => '0.600000',
    
    Windowed                 => 1,
    DisplayWidth             => 1920,
    DisplayHeight            => 1080,
    DisplayAspectRatio       => 1.777778,
    LastSeenVideoDriver      => 'OpenGL',
    VideoRenderers           => 'opengl',
  },
};

my $joy1Id = 1;
my $joy2Id = 2;

my $joy1Name = 'energy';
my $joy2Name = 'redoctane';
my $kb1Name = 'kb1';
my $kb2Name = 'kb2';

my $keygrid = {
  NAMES     => ['energy', 'redoctane', 'kb1',    'kb2'],
  Up        => [1,        13,          'home',   't'], 
  Down      => [2,        15,          'end',    'g'],
  Left      => [3,        16,          'delete', 'f'],
  Right     => [4,        14,          'pgdn',   'g'],
  MenuUp    => [5,        1,           'up',     'w'],
  MenuDown  => [6,        4,           'down',   's'],
  MenuLeft  => [7,        3,           'left',   'a'],
  MenuRight => [8,        2,           'right',  'd'],
  Back      => [9,        9,           'escape', 'x'],
  Start     => [10,       10,          'enter',  'z'],
};


sub generateKeymap($$$$$);
sub readConf($);
sub writeConf($);
sub modifyConf($$);
sub replaceConf($$);

sub main(@){
  system "mkdir", "-p", "$prefsDir";
  replaceConf $prefsIni, $prefs;
  replaceConf $keymapsIni, generateKeymap(
    $keygrid, $joy1Name, $joy2Name, $kb1Name, $kb2Name);
  system "$smExecDir/stepmania";
}

sub generateKeymap($$$$$){
  my ($keyGrid, $joy1Name, $joy2Name, $kb1Name, $kb2Name) = @_;
  my %namedKeymaps;

  my %buttons = map{$_ => 1} keys %$keygrid;
  delete $buttons{NAMES};

  my @orderedNames = @{$$keygrid{NAMES}};
  for(my $i=0; $i<@orderedNames; $i++){
    my $name = $orderedNames[$i];
    $namedKeymaps{$name} = {};
    for my $btn(keys %buttons){
      ${$namedKeymaps{$name}}{$btn} = ${$$keygrid{$btn}}[$i];
    }
  }
  
  my %keymap;
  for my $player((1, 2)){
    my $joyName = $player == 1 ? $joy1Name : $joy2Name;
    my $kbName = $player == 1 ? $kb1Name : $kb2Name;
    if(defined $joyName or defined $kbName){
      my $joyMap = $namedKeymaps{$joyName};
      my $kbMap = $namedKeymaps{$kbName};
      for my $btn(keys %buttons){
        my $joyBtn = $$joyMap{$btn};
        my $kbBtn = $$kbMap{$btn};
        my $val;
        my $joyId = $player == 1 ? $joy1Id : $joy2Id;
        $val .= "Joy${joyId}_B$joyBtn" if defined $joyBtn;
        $val .= ":" if defined $joyBtn and $kbBtn;
        $val .= "Key_$kbBtn" if defined $kbBtn;
        $keymap{"${player}_$btn"} = $val;
      }
    }
  }
  return {'dance' => \%keymap};
}

sub readConf($){
  my $s = shift();
  my $conf = {};
  my $confSection;
  for my $line(split /[\n\r]+/, $s){
    if($line =~ /^\[(.*)\]$/){
      $confSection = {};
      ${$conf}{$1} = $confSection;
    }elsif($line =~ /^(.*)=(.*)$/){
      $$confSection{$1} = $2;
    }
  }
  return $conf;
}

sub writeConf($){
  my %conf = %{shift()};
  my $s = '';
  for my $section(sort keys %conf){
    $s .= "[$section]\n";
    my $sectionConf = $conf{$section};
    for my $key(sort keys %$sectionConf){
      $s .= "$key=${$sectionConf}{$key}\n";
    }
    $s .= "\n";
  }
  return $s;
}

sub modifyConf($$){
  my %orig = %{shift()};
  my %changes = %{shift()};
  for my $section(keys %changes){
    if(not defined $orig{$section}){
      $orig{$section} = $changes{$section};
    }else{
      my $origSectionConf = $orig{$section};
      my $changesSectionConf = $changes{$section};
      for my $key(keys %$changesSectionConf){
        ${$origSectionConf}{$key} = ${$changesSectionConf}{$key};
      }
    }
  }
  return \%orig;
}

sub replaceConf($$){
  my $file = shift;
  my $changes = shift;
  my $conf = readConf `cat $file`;
  my $content = writeConf(modifyConf($conf, $changes));
  open FH, "> $file" or die "Couldnt open $file for writing.\n";
  print FH $content;
  close FH;
}

main(@ARGV);
