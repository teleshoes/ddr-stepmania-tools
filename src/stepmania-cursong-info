#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(dirname);

my $LIMIT = 10;

my $CURSONG_FILE = "$ENV{HOME}/.cache/stepmania-selected-song";
my $XML_UPLOAD_DIR = "$ENV{HOME}/.stepmania/Save/Upload";
my $SONG_PARENT_DIR = "$ENV{HOME}/Games/stepmania/latest";

my $RECENT_MILLIS = 6 * 60 * 60 * 1000; #SIX HOURS
my $RECENT_FRAC_DAYS = sprintf "%.4f", $RECENT_MILLIS / 1000 / 60 / 60 / 24;

my @ATTS = qw(DATETIME PASS_FAIL DDRA_SCORE PERCENT_SCORE FC_MAYBE);

my @DDR_GAMES = qw(singles doubles);
my @DDR_DIFFS = qw(beginner basic difficult expert challenge);
my $OK_DDR_GAMES = join "|", @DDR_GAMES;
my $OK_DDR_DIFFS = join "|", @DDR_DIFFS;

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS]
    read current song from $CURSONG_FILE
      (set by hack in stepmania theme)
    extract+print info with `ddr-stepmania-score`, `ddrname`, and `simfile-radar`

  OPTS
    -m | --monitor
      loop forever, using inotifywait to efficiently wait on I/O writes to:
        $CURSONG_FILE
        $XML_UPLOAD_DIR/
      when either is written to (current song changes or new XML score appears),
        do the same as `$0`
";

sub formatCurSongInfo($);
sub getCurSongInfo();
sub getSongInfo($$$);
sub ddrnameBestScore($$$);
sub simfileRadar($$$);
sub calculateRadarFeet($$$);
sub getDDRStepmaniaScoreAtts($@);
sub findXmlFiles($$$);
sub findRecentXmlFiles();
sub md5sum($);
sub readProcLine(@);

sub main(@){
  my $monitor = 0;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-m|--monitor)$/){
      $monitor = 1;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  if($monitor){
    while(1){
      my $md5 = md5sum $CURSONG_FILE;
      print formatCurSongInfo(getCurSongInfo());
      if($md5 ne md5sum $CURSONG_FILE){
        next;
      }
      system "inotifywait",
        "-q", "-q",          #silent
        "-e", "close_write", #directory or file written
        $CURSONG_FILE,       #song selected in stepmania
        $XML_UPLOAD_DIR,     #new score file appeared in stepmania
      ;
      if($? != 0){
        die "inotifywait quit unexpectedly\n";
      }
    }
  }else{
    print formatCurSongInfo(getCurSongInfo());
  }
}

sub formatCurSongInfo($){
  my ($info) = @_;
  my $fmt = "\n";
  $fmt .= readProcLine("date") . "\n";
  $fmt .= "\n";

  my $trimSongNameId = $$info{songNameId};
  $trimSongNameId = substr($trimSongNameId, 0, 35) . "..." if length $trimSongNameId > 38;

  my $best = $$info{ddrnameBestScore};
  if(not defined $best or $best =~ /^\s*$/){
    $best = "-------";
  }

  $fmt .= sprintf("%s\n%-7s %-9s %s\n",
            $trimSongNameId,
            $$info{ddrGame},
            $$info{ddrDiff},
            $best,
  );

  $fmt .= sprintf "S%-3d | V%-3d | A%-3d | F%-3d | C%-3d\n",
             $$info{simfileRadar}{STREAM},
             $$info{simfileRadar}{VOLTAGE},
             $$info{simfileRadar}{AIR},
             $$info{simfileRadar}{FREEZE},
             $$info{simfileRadar}{CHAOS},
             ;
  $fmt .= "  feet=$$info{radarFeet}\n";
  $fmt .= "  session:"
          . " passed=$$info{sessionXmlPassedCount}"
          . " failed=$$info{sessionXmlFailedCount}"
          . "\n"
          ;
  $fmt .= "\n";

  my @xmlScores = @{$$info{xmlScores}};
  for(my $i=0; $i<$LIMIT; $i++){
    my $scoreAtts;
    if($i < @xmlScores){
      $scoreAtts = $xmlScores[$i];
    }else{
      $scoreAtts = {map {$_ => ""} @ATTS};
    }
    my $passFail = $$scoreAtts{PASS_FAIL};
    $passFail = "p" if $passFail =~ /^passed$/i;
    $passFail = "F" if $passFail =~ /^failed$/i;
    $fmt .= sprintf("  %s   %-7s %s %s\n    %s\n",
              $$scoreAtts{PASS_FAIL},
              $$scoreAtts{DDRA_SCORE},
              $$scoreAtts{PERCENT_SCORE},
              $$scoreAtts{FC_MAYBE},
              $$scoreAtts{DATETIME},
    );
  }

  return $fmt;
}

sub getCurSongInfo(){
  my $out = `cat $CURSONG_FILE`;
  if($out =~ /^StepsType_(\w+)%%%Difficulty_(\w+)%%%(.+)$/){
    my ($stepsType, $difficulty, $simfile) = ($1, $2, $3);
    getSongInfo($stepsType, $difficulty, $simfile);
  }else{
    die "ERROR: could not parse $CURSONG_FILE\n";
  }
}

sub getSongInfo($$$){
  my ($stepsType, $difficulty, $simfile) = @_;

  my $info = {};
  my $songDir = dirname $simfile;
  my $smGame = lc $stepsType;
  $smGame =~ s/_/-/g;
  my $smDiff = $difficulty;

  $$info{songDir}    = $songDir;
  $$info{songNameId} = readProcLine("ddr-stepmania-score", "--extract-song-name", $songDir);
  $$info{ddrGame}    = readProcLine("ddr-stepmania-score", "--extract-ddra-game", $smGame);
  $$info{ddrDiff}    = readProcLine("ddr-stepmania-score", "--extract-ddra-diff", $smDiff);

  my @xmlFiles = findXmlFiles($songDir, $smGame, $smDiff);
  @xmlFiles = reverse @xmlFiles;
  if(@xmlFiles > $LIMIT){
    @xmlFiles = @xmlFiles[0..($LIMIT-1)];
  }

  my $xmlScores = [];
  for my $xmlFile(@xmlFiles){
    my $scoreAtts = getDDRStepmaniaScoreAtts($xmlFile, @ATTS);
    push @$xmlScores, $scoreAtts;
  }

  $$info{xmlScores} = $xmlScores;

  $$info{ddrnameBestScore} = ddrnameBestScore(
    $$info{songNameId}, $$info{ddrGame}, $$info{ddrDiff});

  $$info{simfileRadar} = simfileRadar($simfile, $$info{ddrGame}, $$info{ddrDiff});
  $$info{radarFeet} = calculateRadarFeet($$info{simfileRadar}, $$info{ddrGame}, $$info{ddrDiff});
  my @sessionXmlFiles = findRecentXmlFiles();
  my $totalCount = @sessionXmlFiles;
  my $failedCount = grep {system "grep -i failed \"$_\" >/dev/null"; $? == 0;} @sessionXmlFiles;
  my $passedCount = $totalCount - $failedCount;

  $$info{sessionXmlPassedCount} = $passedCount;
  $$info{sessionXmlFailedCount} = $failedCount;

  return $info;
}

sub ddrnameBestScore($$$){
  my ($songNameId, $ddrGame, $ddrDiff) = @_;
  return "" if $ddrGame !~ /^($OK_DDR_GAMES)$/;
  return "" if $ddrDiff !~ /^($OK_DDR_DIFFS)$/;
  return readProcLine("ddrname",
    "--scorestats",
    "--song", "$songNameId",
    "--$ddrGame",
    "--$ddrDiff",
    "--no-group-buckets",
    "--format", "%{score} (%{date})",
    "--combine-machines",
    "--best-by-bucket",
  );
}

sub simfileRadar($$$){
  my ($simfile, $ddrGame, $ddrDiff) = @_;
  my $line = readProcLine("simfile-radar",
    "--game=^$ddrGame\$",
    "--diff=^$ddrDiff\$",
    "--format=%d-STREAM,%d-VOLTAGE,%d-AIR,%d-FREEZE,%d-CHAOS",
    "$SONG_PARENT_DIR/$simfile",
  );
  if($line =~ /^(\d+|\d*\.\d+),(\d+|\d*\.\d+),(\d+|\d*\.\d+),(\d+|\d*\.\d+),(\d+|\d*\.\d+)$/){
    return {
      STREAM  => $1,
      VOLTAGE => $2,
      AIR     => $3,
      FREEZE  => $4,
      CHAOS   => $5,
    };
  }else{
    return undef;
  }
}

sub calculateRadarFeet($$$){
  my ($simfileRadar, $ddrGame, $ddrDiff) = @_;
  $ddrGame = "singles" if $ddrGame !~ /^($OK_DDR_GAMES)$/;
  $ddrDiff = "expert" if $ddrDiff !~ /^($OK_DDR_DIFFS)$/;
  return readProcLine(
    "ddr-radar-feet",
    $ddrGame,
    $ddrDiff,
    $$simfileRadar{STREAM},
    $$simfileRadar{VOLTAGE},
    $$simfileRadar{AIR},
    $$simfileRadar{FREEZE},
    $$simfileRadar{CHAOS},
  );
}

sub getDDRStepmaniaScoreAtts($@){
  my ($xmlFile, @atts) = @_;

  my $format = join("###", map {"%$_"} @atts) . "%n";
  my $out = readProcLine("ddr-stepmania-score", "--no-filename", $xmlFile, "--format=$format");

  my @vals = split /###/, $out;
  if(@vals == @atts - 1){
    push @vals, "";
  }
  if(@vals != @atts){
    die "ERROR: could not parse \"ddr-stepmania-score\" output: \"$out\"\n";
  }
  my $attVals = {};
  for(my $i=0; $i<@atts; $i++){
    $$attVals{$atts[$i]} = $vals[$i];
  }
  return $attVals;
}

sub findXmlFiles($$$){
  my ($songDir, $smGame, $smDiff) = @_;

  my $songDirRegex = $songDir;
  $songDirRegex =~ s/^\/*//;
  $songDirRegex =~ s/\/*$//;
  $songDirRegex =~ s/[^a-zA-Z0-9_\-\/]+/.*/g;
  $songDirRegex = "/*$songDirRegex/*";

  my $regex = ""
    . "<Song Dir='$songDirRegex'/>"
    . "[ \\t\\r\\n]*"
    . "<Steps Difficulty='$smDiff' StepsType='$smGame'"
    ;

  my @grepCmd = ("pcre2grep",
    "--multiline",
    "--ignore-case",
    "--files-with-matches",
    "--recursive",
    $regex,
    $XML_UPLOAD_DIR,
  );

  open CMD, "-|", @grepCmd or die "ERROR: could not run @grepCmd\n";
  my @files = <CMD>;
  close CMD;

  chomp foreach @files;
  @files = grep {$_ =~ /\.xml$/i} @files;
  return @files;
}

sub findRecentXmlFiles(){
  my @findCmd = ("find",
    $XML_UPLOAD_DIR,
    "-mtime", "-$RECENT_FRAC_DAYS",
    "-iname", "*.xml",
  );
  open CMD, "-|", @findCmd or die "ERROR: error running \"@findCmd\"\n";
  my @files = <CMD>;
  close CMD;
  chomp foreach @files;
  return @files;
}

sub md5sum($){
  open CMD, "-|", "md5sum", $_[0];
  my $md5sum = <CMD>;
  close CMD;
  chomp $md5sum;
  if($md5sum =~ /^([0-9a-f]{32})(\s.*|$)$/){
    return $1;
  }else{
    return undef;
  }
}

sub readProcLine(@){
  my @cmd = @_;
  open CMD, "-|", @cmd or die "ERROR: \"@cmd\" failed\n$!\n";
  my $out = join '', <CMD>;
  close CMD;
  chomp $out;
  return $out;
}

&main(@ARGV);
