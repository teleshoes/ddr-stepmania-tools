#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(dirname);

my $XML_SCORE_LIMIT = 10;
my $MAX_SONG_NAME_LEN = 38;
my $DEFAULT_USE_TERM_COLOR = -t STDOUT;

my $CURSONG_FILE_P1 = "$ENV{HOME}/.cache/stepmania-selected-song-p1";
my $PREFS_INI = "$ENV{HOME}/.stepmania/Save/Preferences.ini";
my $OUTFOX_PREFS_INI = "$ENV{HOME}/.stepmania/Save/OutFoxPrefs.ini";
my $XML_UPLOAD_DIR = "$ENV{HOME}/.stepmania/Save/Upload";
my $SONG_PARENT_DIR = "$ENV{HOME}/Games/stepmania/latest";

my $RECENT_MILLIS = 6 * 60 * 60 * 1000; #SIX HOURS

my @ATTS = qw(DATETIME PASS_FAIL DDRA_SCORE PERCENT_SCORE FC_MAYBE);

my @DDR_GAMES = qw(singles doubles);
my @DDR_DIFFS = qw(beginner basic difficult expert challenge);
my $OK_DDR_GAMES = join "|", @DDR_GAMES;
my $OK_DDR_DIFFS = join "|", @DDR_DIFFS;

my $EXEC_DDR_NEW_SCORE = "ddr-new-score";

my $FORMAT_DEFAULT = "default";
my $FORMAT_SHORT = "short";
my $FORMAT_QML = "qml";

my $usage = "Usage:
  $0 -h|--help
    show this message

  $0 [OPTS]
    read current song from $CURSONG_FILE_P1
      (set by hack in stepmania theme)
    extract+print info with `ddr-stepmania-score`, `ddrname`, and `simfile-radar`

  OPTS
    -m | --monitor
      loop forever, using inotifywait to efficiently wait on I/O writes to:
        $CURSONG_FILE_P1
        $XML_UPLOAD_DIR/
      when either is written to (current song changes or new XML score appears),
        do the same as `$0`
      also, if the number of XML files is different after I/O write, run the command:
        $EXEC_DDR_NEW_SCORE &

    --file=OUTPUT_FILE
      write output to OUTPUT_FILE, once per run, instead of STDOUT

    --color
      use Term::ANSIColor to output text formatted with ANSI color escapes
    --no-color
      do not output any ANSI color escapes (also print XML without colors for --qml)
    --color-term-only
      (this is the default)
      if STDOUT is a TTY, same as --color
      if STDOUT is not a TTY, same as --no-color

    --qml | --xml
      output XML suitable for displaying in a Text.text attribute in QML QtQuick
      implies --color, which can be overridden with --no-color

    -s | --short
      do not print XML scores
";

sub formatCurSongInfo($$);
sub getCurSongInfo();
sub getSongInfo($$$);
sub ddrnameBestScore($$$);
sub simfileRadar($$$);
sub calculateRadarFeet($$$);
sub getDDRStepmaniaScoreAtts($$);
sub findXmlFiles($$$);
sub findRecentXmlFiles();
sub maybeBig($$);
sub blue($$);
sub yellow($$);
sub red($$);
sub colorText($$$);
sub md5sum($);
sub writeFile($$);
sub readProc(@);
sub readProcLine(@);

sub main(@){
  my $opts = {
    monitor => 0,
    useTermColor => $DEFAULT_USE_TERM_COLOR,
    useQMLColor => 1,
    format => $FORMAT_DEFAULT,
    outputFile => undef,
  };
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(-m|--monitor)$/){
      $$opts{monitor} = 1;
    }elsif($arg =~ /^(--color)$/){
      $$opts{useTermColor} = 1;
      $$opts{useQMLColor} = 1;
    }elsif($arg =~ /^(--no-color)$/){
      $$opts{useTermColor} = 0;
      $$opts{useQMLColor} = 0;
    }elsif($arg =~ /^(--color-term-only)$/){
      $$opts{useTermColor} = -t STDOUT;
    }elsif($arg =~ /^(-s|--short)$/){
      $$opts{format} = $FORMAT_SHORT;
    }elsif($arg =~ /^(--qml|--xml)$/){
      $$opts{format} = $FORMAT_QML;
    }elsif($arg =~ /^--file=(.+)$/){
      $$opts{outputFile} = $1;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  if($$opts{monitor}){
    while(1){
      my $md5 = md5sum $CURSONG_FILE_P1;
      my $fmt = formatCurSongInfo($opts, getCurSongInfo());
      if(defined $$opts{outputFile}){
        writeFile $$opts{outputFile}, $fmt;
      }else{
        print $fmt;
      }
      if($md5 ne md5sum $CURSONG_FILE_P1){
        next;
      }
      my @xmlFiles = findRecentXmlFiles();
      my $oldXmlCount = @xmlFiles;
      system "inotifywait",
        "-q", "-q",          #silent
        "-e", "close_write", #directory or file written
        $CURSONG_FILE_P1,    #song selected in stepmania
        $XML_UPLOAD_DIR,     #new score file appeared in stepmania
      ;
      if($? != 0){
        die "inotifywait quit unexpectedly\n";
      }
      @xmlFiles = findRecentXmlFiles();
      my $newXmlCount = @xmlFiles;
      if($oldXmlCount != $newXmlCount){
        system "$EXEC_DDR_NEW_SCORE &";
      }
    }
  }else{
    my $fmt = formatCurSongInfo($opts, getCurSongInfo());
    if(defined $$opts{outputFile}){
      writeFile $$opts{outputFile}, $fmt;
    }else{
      print $fmt;
    }
  }
}

sub formatCurSongInfo($$){
  my ($opts, $info) = @_;
  my $fmt = "\n";
  $fmt .= readProcLine("date") . "\n";
  $fmt .= sprintf("  offset=%s   timings=%s\n",
            red($opts, "$$info{offsetMillis}ms"),
            red($opts, $$info{smartTimings}),
  );
  $fmt .= "\n";


  my $trimSongNameId = $$info{songNameId};
  if(length $trimSongNameId > $MAX_SONG_NAME_LEN){
    $trimSongNameId = substr($trimSongNameId, 0, $MAX_SONG_NAME_LEN-3) . "...";
  }

  my $best = $$info{ddrnameBestScore};
  if(not defined $best or $best =~ /^\s*$/){
    $best = "-------";
  }

  $fmt .= sprintf("%s\n%-7s %-9s %s\n",
            blue($opts, $trimSongNameId),
            $$info{ddrGame},
            $$info{ddrDiff},
            yellow($opts, $best),
  );

  $fmt .= sprintf "S%-3d | V%-3d | A%-3d | F%-3d | C%-3d\n",
             $$info{simfileRadar}{STREAM},
             $$info{simfileRadar}{VOLTAGE},
             $$info{simfileRadar}{AIR},
             $$info{simfileRadar}{FREEZE},
             $$info{simfileRadar}{CHAOS},
             ;
  $fmt .= maybeBig($opts,
    "  feet=" . yellow($opts, $$info{radarFeet}) . "\n");

  $fmt .= "\n";

  my $passedFmt = " passed=" . yellow($opts, $$info{sessionXmlPassedCount});
  my $failedFmt = " failed=" . yellow($opts, $$info{sessionXmlFailedCount});

  $fmt .= maybeBig($opts, $passedFmt) . "\n";
  $fmt .= maybeBig($opts, $failedFmt) . "\n";

  $fmt .= "\n";

  my @xmlScores = @{$$info{xmlScores}};
  for(my $i=0; $i<$XML_SCORE_LIMIT; $i++){
    my $scoreAtts;
    if($i < @xmlScores){
      $scoreAtts = $xmlScores[$i];
    }else{
      $scoreAtts = {map {$_ => ""} @ATTS};
    }
    my $passFail = $$scoreAtts{PASS_FAIL};
    $passFail = "p" if $passFail =~ /^passed$/i;
    $passFail = "F" if $passFail =~ /^failed$/i;
    if($$opts{format} ne $FORMAT_SHORT){
      my $ddrScore = sprintf "%-7s", $$scoreAtts{DDRA_SCORE};
      $ddrScore = maybeBig($opts, $ddrScore) if $i == 0;

      $fmt .= sprintf("  %s   %s %s %s\n    %s\n",
                $$scoreAtts{PASS_FAIL},
                $ddrScore,
                $$scoreAtts{PERCENT_SCORE},
                $$scoreAtts{FC_MAYBE},
                $$scoreAtts{DATETIME},
      );
    }
  }

  if($$opts{format} eq $FORMAT_QML){
    $fmt =~ s/\n/<br\/>\n/g;
    $fmt =~ s/ </&nbsp;</g;
    $fmt =~ s/> />&nbsp;/g;
    $fmt =~ s/  /&nbsp;&nbsp;/g;
  }

  return $fmt;
}

sub getCurSongInfo(){
  my $out = `cat $CURSONG_FILE_P1`;

  my $player         = $1 if $out =~ /^player=(\d+)$/m;
  my $stepsType      = $1 if $out =~ /^stepsType=(\w+)$/m;
  my $difficulty     = $1 if $out =~ /^difficulty=(\w+)$/m;
  my $simfileRelPath = $1 if $out =~ /^simfileRelPath=(.+)$/m;

  if(0
    or not defined $player
    or not defined $stepsType
    or not defined $difficulty
    or not defined $simfileRelPath
  ){
    die "ERROR: could not parse $CURSONG_FILE_P1\n";
  }

  if(defined $player and $player ne "1"){
    die "ERROR: cur-song-info player number mismatch\n";
  }

  return getSongInfo($stepsType, $difficulty, $simfileRelPath);
}

sub getSongInfo($$$){
  my ($stepsType, $difficulty, $simfile) = @_;

  my $info = {};
  my $songDir = dirname $simfile;
  my $smGame = lc $stepsType;
  $smGame =~ s/_/-/g;
  my $smDiff = $difficulty;

  $$info{songDir}    = $songDir;
  $$info{songNameId} = readProcLine("ddr-stepmania-score", "--extract-song-name", $songDir);
  $$info{ddrGame}    = readProcLine("ddr-stepmania-score", "--extract-ddra-game", $smGame);
  $$info{ddrDiff}    = readProcLine("ddr-stepmania-score", "--extract-ddra-diff", $smDiff);

  my $sep = '(?:^|$|\r|\n)';

  my $prefs = `cat $PREFS_INI`;
  if($prefs =~ /${sep}\s*GlobalOffsetSeconds\s*=\s*(\+|-)?(\d+|\d*\.\d+)\s*${sep}/){
    my ($sign, $offsetS) = ($1, $2);
    $offsetS *= (defined $sign and $sign =~ /-/) ? "-1" : "1";
    $offsetS = int(1000.0 * $offsetS);
    $$info{offsetMillis} = $offsetS;
  }else{
    $$info{offsetMillis} = "?";
  }

  my $outfoxPrefs = `cat $OUTFOX_PREFS_INI`;
  if($outfoxPrefs =~ /${sep}\s*SmartTimings\s*=\s*([a-zA-Z0-9_\- ]+)${sep}/){
    $$info{smartTimings} = $1;
  }else{
    $$info{smartTimings} = "?";
  }

  my @xmlFiles = findXmlFiles($songDir, $smGame, $smDiff);
  @xmlFiles = reverse @xmlFiles;
  if(@xmlFiles > $XML_SCORE_LIMIT){
    @xmlFiles = @xmlFiles[0..($XML_SCORE_LIMIT-1)];
  }

  my $xmlScores = getDDRStepmaniaScoreAtts([@ATTS], [@xmlFiles]);

  $$info{xmlScores} = $xmlScores;

  $$info{ddrnameBestScore} = ddrnameBestScore(
    $$info{songNameId}, $$info{ddrGame}, $$info{ddrDiff});

  $$info{simfileRadar} = simfileRadar($simfile, $$info{ddrGame}, $$info{ddrDiff});
  $$info{radarFeet} = calculateRadarFeet($$info{simfileRadar}, $$info{ddrGame}, $$info{ddrDiff});
  my @sessionXmlFiles = findRecentXmlFiles();
  my $totalCount = @sessionXmlFiles;
  my $failedCount = grep {system "grep -i failed \"$_\" >/dev/null"; $? == 0;} @sessionXmlFiles;
  my $passedCount = $totalCount - $failedCount;

  $$info{sessionXmlPassedCount} = $passedCount;
  $$info{sessionXmlFailedCount} = $failedCount;

  return $info;
}

sub ddrnameBestScore($$$){
  my ($songNameId, $ddrGame, $ddrDiff) = @_;
  return "" if $ddrGame !~ /^($OK_DDR_GAMES)$/;
  return "" if $ddrDiff !~ /^($OK_DDR_DIFFS)$/;
  return readProcLine("ddrname",
    "--scorestats",
    "--song", "$songNameId",
    "--$ddrGame",
    "--$ddrDiff",
    "--no-group-buckets",
    "--format", "%{score} (%{date})",
    "--combine-machines",
    "--best-by-bucket",
  );
}

sub simfileRadar($$$){
  my ($simfile, $ddrGame, $ddrDiff) = @_;
  my $line = readProcLine("simfile-radar",
    "--game=^$ddrGame\$",
    "--diff=^$ddrDiff\$",
    "--format=%d-STREAM,%d-VOLTAGE,%d-AIR,%d-FREEZE,%d-CHAOS",
    "$SONG_PARENT_DIR/$simfile",
  );
  if($line =~ /^(\d+|\d*\.\d+),(\d+|\d*\.\d+),(\d+|\d*\.\d+),(\d+|\d*\.\d+),(\d+|\d*\.\d+)$/){
    return {
      STREAM  => $1,
      VOLTAGE => $2,
      AIR     => $3,
      FREEZE  => $4,
      CHAOS   => $5,
    };
  }else{
    return undef;
  }
}

sub calculateRadarFeet($$$){
  my ($simfileRadar, $ddrGame, $ddrDiff) = @_;
  $ddrGame = "singles" if $ddrGame !~ /^($OK_DDR_GAMES)$/;
  $ddrDiff = "expert" if $ddrDiff !~ /^($OK_DDR_DIFFS)$/;
  return readProcLine(
    "ddr-radar-feet",
    $ddrGame,
    $ddrDiff,
    $$simfileRadar{STREAM},
    $$simfileRadar{VOLTAGE},
    $$simfileRadar{AIR},
    $$simfileRadar{FREEZE},
    $$simfileRadar{CHAOS},
  );
}

sub getDDRStepmaniaScoreAtts($$){
  my ($atts, $xmlFiles) = @_;

  my $format = join("###", map {"%$_"} @$atts) . "%n";
  my @lines = readProc("ddr-stepmania-score", "--no-filename", "--format=$format", @$xmlFiles);
  my $xmlScores = [];
  for my $line(@lines){
    chomp $line;
    my @vals = split /###/, $line;
    if(@vals == @$atts - 1){
      push @vals, "";
    }
    if(@vals != @$atts){
      die "ERROR: could not parse \"ddr-stepmania-score\" output: \"$line\"\n";
    }
    my $attVals = {};
    for(my $i=0; $i<@$atts; $i++){
      $$attVals{$$atts[$i]} = $vals[$i];
    }
    push @$xmlScores, $attVals;
  }
  return $xmlScores;
}

sub findXmlFiles($$$){
  my ($songDir, $smGame, $smDiff) = @_;

  my $songDirRegex = $songDir;
  $songDirRegex =~ s/^\/*//;
  $songDirRegex =~ s/\/*$//;
  $songDirRegex =~ s/[^a-zA-Z0-9_\-\/]+/.*/g;
  $songDirRegex = "/*$songDirRegex/*";

  my $regex = ""
    . "<Song Dir='$songDirRegex'/>"
    . "[ \\t\\r\\n]*"
    . "<Steps Difficulty='$smDiff' .*StepsType='$smGame'"
    ;

  my @grepCmd = ("pcre2grep",
    "--multiline",
    "--ignore-case",
    "--files-with-matches",
    "--recursive",
    $regex,
    $XML_UPLOAD_DIR,
  );

  open CMD, "-|", @grepCmd or die "ERROR: could not run @grepCmd\n";
  my @files = <CMD>;
  close CMD;

  chomp foreach @files;
  @files = grep {$_ =~ /\.xml$/i} @files;
  return @files;
}

sub findRecentXmlFiles(){
  my $recentFractionalDays = sprintf "%.4f", $RECENT_MILLIS / 1000 / 60 / 60 / 24;
  my @findCmd = ("find",
    $XML_UPLOAD_DIR,
    "-mtime", "-$recentFractionalDays",
    "-iname", "*.xml",
  );
  open CMD, "-|", @findCmd or die "ERROR: error running \"@findCmd\"\n";
  my @files = <CMD>;
  close CMD;
  chomp foreach @files;
  return @files;
}

sub maybeBig($$){
  my ($opts, $text) = @_;
  if($$opts{format} eq $FORMAT_QML){
    return "<font size='+2'><b>$text</b></font>";
  }else{
    return $text;
  }
}

sub blue($$){
  my ($opts, $text) = @_;
  my $color = $$opts{format} eq $FORMAT_QML ? "blue" : "bold blue";
  return colorText($opts, $text, $color);
}
sub yellow($$){
  my ($opts, $text) = @_;
  my $color = $$opts{format} eq $FORMAT_QML ? "brown" : "yellow";
  return colorText($opts, $text, $color);
}
sub red($$){
  my ($opts, $text) = @_;
  return colorText($opts, $text, "red");
}
sub colorText($$$){
  my ($opts, $text, $color) = @_;
  if($$opts{format} eq $FORMAT_QML){
    if($$opts{useQMLColor}){
      return "<font color='$color'>$text</font>";
    }else{
      return $text;
    }
  }else{
    if($$opts{useTermColor}){
      require Term::ANSIColor;
      return Term::ANSIColor::colored($text, $color);
    }else{
      return $text;
    }
  }
}

sub md5sum($){
  open CMD, "-|", "md5sum", $_[0];
  my $md5sum = <CMD>;
  close CMD;
  chomp $md5sum;
  if($md5sum =~ /^([0-9a-f]{32})(\s.*|$)$/){
    return $1;
  }else{
    return undef;
  }
}

sub writeFile($$){
  my ($file, $content) = @_;
  open FH, "> $file" or die "ERROR: could not write $file\n$!\n";
  print FH $content;
  close FH;
}

sub readProc(@){
  my @cmd = @_;
  open CMD, "-|", @cmd or die "ERROR: \"@cmd\" failed\n$!\n";
  my @lines = <CMD>;
  close CMD;
  return @lines;
}

sub readProcLine(@){
  my $line = join '', readProc(@_);
  chomp $line;
  return $line;
}

&main(@ARGV);
