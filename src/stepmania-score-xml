#!/usr/bin/perl
use strict;
use warnings;
use XML::LibXML;
use Date::Parse qw(str2time);

sub extractScoreEntries($);
sub getSingleChildByTagName($$);
sub convertStepsTypeToGame($);

my $USAGE = "Usage:
  $0 -h | --help
    show this message
";

sub main(@){
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  for my $scoreEntry(extractScoreEntries("/tmp/a.xml")){
    print "$$scoreEntry{songDir}-$$scoreEntry{game}-$$scoreEntry{smDiff}\n";
  }
}

sub extractScoreEntries($){
  my ($filename) = @_;
  my @scoreEntries;

  my $dom = XML::LibXML->load_xml(location => $filename);

  my $machineGuid = undef;
  $machineGuid = $dom->findvalue("Stats/GeneralData/Guid") if not $machineGuid;
  $machineGuid = $dom->findvalue("Stats/MachineGuid") if not $machineGuid;
  $machineGuid = "" if not $machineGuid;

  #stats file
  for my $songNode($dom->findnodes("/Stats/SongScores/Song")){
    my $songDir = $songNode->getAttribute("Dir");
    for my $stepsNode($songNode->getChildrenByTagName("Steps")){
      my $smDiff = $stepsNode->getAttribute("Difficulty");
      my $stepsType = $stepsNode->getAttribute("StepsType");
      my @scoreNodes = $stepsNode->findnodes("HighScoreList/HighScore");

      my $game = convertStepsTypeToGame($stepsType);
      for my $scoreNode(@scoreNodes){
        my $dateTimeXML = $scoreNode->findvalue("./DateTime");
        my $epoch = str2time($dateTimeXML);
        my $percentDP = $scoreNode->findvalue("./PercentDP");

        push @scoreEntries, {
          songDir     => $songDir,
          game        => $game,
          smDiff      => $smDiff,
          machineGuid => $machineGuid,
          epoch       => $epoch,
          percentDP   => $percentDP,

          songNode    => $songNode,
          stepsNode   => $stepsNode,
          scoreNode   => $scoreNode,
        };
      }
    }
  }

  my @uploadFileContainerNodes = $dom->findnodes(
    "/Stats/RecentSongScores/HighScoreForASongAndSteps");
  for(my $i=0; $i<@uploadFileContainerNodes; $i++){
    my $containerNode = $uploadFileContainerNodes[$i];
    my $songNode = getSingleChildByTagName($containerNode, "Song");
    my $stepsNode = getSingleChildByTagName($containerNode, "Steps");
    my $scoreNode = getSingleChildByTagName($containerNode, "HighScore");

    my $songDir = $songNode->getAttribute("Dir");
    my $smDiff = $stepsNode->getAttribute("Difficulty");
    my $stepsType = $stepsNode->getAttribute("StepsType");
    my $dateTimeXML = $scoreNode->findvalue("./DateTime");
    my $percentDP = $scoreNode->findvalue("./PercentDP");

    my $game = convertStepsTypeToGame($stepsType);
    my $epoch = str2time($dateTimeXML);

    push @scoreEntries, {
      songDir     => $songDir,
      game        => $game,
      smDiff      => $smDiff,
      machineGuid => $machineGuid,
      percentDP   => $percentDP,
      epoch       => $epoch,

      songNode    => $songNode,
      stepsNode   => $stepsNode,
      scoreNode   => $scoreNode,
    };
  }
  return @scoreEntries;
}

sub getSingleChildByTagName($$){
  my ($node, $tagName) = @_;
  my $nodeList = $node->getChildrenByTagName($tagName);
  if($nodeList->size() == 1){
    return $nodeList->get_node(1);
  }else{
    return undef;
  }
}

#dance-single           => singles
#StepsType_Dance_Single => singles
#dance-double           => doubles
#StepsType_Dance_Double => doubles
sub convertStepsTypeToGame($){
  my ($stepsType) = @_;
  my $game = $stepsType;
  $game =~ s/^StepsType[_\-]//i;
  $game =~ s/^dance[_\-]//i;
  $game =~ s/s$//; #singles/doubles => single/double, just in case
  if($game =~ /^single$/i){
    return "singles";
  }elsif($game =~ /^double$/i){
    return "doubles";
  }else{
    die "ERROR: unknown StepsType '$stepsType'\n";
  }
}

&main(@ARGV);
