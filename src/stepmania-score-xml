#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);
use XML::LibXML;
use Date::Parse qw(str2time);

sub extractScoreEntries($);
sub reduceScoreEntries(@);
sub calculateScoreEntryID($);
sub getSingleChildByTagName($$);
sub convertStepsTypeToGame($);
sub assertPresent($@);
sub assertDateTime($$);

my $BAK_DIR = "$ENV{HOME}/.local/share/stepmania-score-xml";
my $BAK_UPLOAD_DIR = "$BAK_DIR/upload";

my $MODE_BUILD_SCORES = "build-scores";

my $EXEC = basename $0;

my $USAGE = "Usage:
  $EXEC -h | --help
    show this message

  $EXEC --build-scores
    -parse XML files in $BAK_UPLOAD_DIR/*.xml
";

sub main(@){
  my $mode = $MODE_BUILD_SCORES;
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $USAGE;
      exit 0;
    }elsif($arg =~ /^(--build-scores)$/){
      $mode = $MODE_BUILD_SCORES;
    }else{
      die "$USAGE\nERROR: unknown arg $arg\n";
    }
  }

  if($mode eq $MODE_BUILD_SCORES){
    my @files = grep {-f $_} glob "$BAK_UPLOAD_DIR/*.xml";

    my @scoreEntries;
    for my $file(@files){
      @scoreEntries = (@scoreEntries, extractScoreEntries($file));
    }

    @scoreEntries = reduceScoreEntries(@scoreEntries);

    for my $scoreEntry(@scoreEntries){
       print "$$scoreEntry{songDir}-$$scoreEntry{game}-$$scoreEntry{smDiff}\n";
    }
  }else{
    die "ERROR: unknown mode $mode\n";
  }
}

sub extractScoreEntries($){
  my ($filename) = @_;
  my @scoreEntries;

  my $dom = XML::LibXML->load_xml(location => $filename);

  my $machineGuid = undef;
  $machineGuid = $dom->findvalue("Stats/GeneralData/Guid") if not $machineGuid;
  $machineGuid = $dom->findvalue("Stats/MachineGuid") if not $machineGuid;
  $machineGuid = "" if not $machineGuid;

  my $errorMsg = "ERROR: error in file $filename";

  #stats file
  for my $songNode($dom->findnodes("/Stats/SongScores/Song")){
    my $songDir = $songNode->getAttribute("Dir");
    assertPresent("$errorMsg - missing song dir", $songDir);
    for my $stepsNode($songNode->getChildrenByTagName("Steps")){
      my $smDiff = $stepsNode->getAttribute("Difficulty");
      my $stepsType = $stepsNode->getAttribute("StepsType");
      my @scoreNodes = $stepsNode->findnodes("HighScoreList/HighScore");

      assertPresent("$errorMsg [$songDir] - missing diff/game", $songDir, $smDiff);

      my $game = convertStepsTypeToGame($stepsType);
      for my $scoreNode(@scoreNodes){
        my $dateTimeXML = $scoreNode->findvalue("./DateTime");
        assertDateTime("$errorMsg [$songDir] invalid/missing DateTime", $dateTimeXML);
        my $epoch = str2time($dateTimeXML);
        my $percentDP = $scoreNode->findvalue("./PercentDP");

        push @scoreEntries, {
          songDir     => $songDir,
          game        => $game,
          smDiff      => $smDiff,
          machineGuid => $machineGuid,
          epoch       => $epoch,
          percentDP   => $percentDP,

          songNode    => $songNode,
          stepsNode   => $stepsNode,
          scoreNode   => $scoreNode,
        };
      }
    }
  }

  my @uploadFileContainerNodes = $dom->findnodes(
    "/Stats/RecentSongScores/HighScoreForASongAndSteps");
  for(my $i=0; $i<@uploadFileContainerNodes; $i++){
    my $containerNode = $uploadFileContainerNodes[$i];
    my $songNode = getSingleChildByTagName($containerNode, "Song");
    my $stepsNode = getSingleChildByTagName($containerNode, "Steps");
    my $scoreNode = getSingleChildByTagName($containerNode, "HighScore");
    assertPresent("$errorMsg - missing song/steps/score node", $songNode, $stepsNode, $scoreNode);

    my $songDir = $songNode->getAttribute("Dir");
    my $smDiff = $stepsNode->getAttribute("Difficulty");
    my $stepsType = $stepsNode->getAttribute("StepsType");
    my $dateTimeXML = $scoreNode->findvalue("./DateTime");
    my $percentDP = $scoreNode->findvalue("./PercentDP");

    assertPresent("$errorMsg - missing songDir/game/diff\n", $songDir, $smDiff, $stepsType);
    assertDateTime("$errorMsg - invalid/missing DateTime\n", $dateTimeXML);

    my $game = convertStepsTypeToGame($stepsType);
    my $epoch = str2time($dateTimeXML);

    push @scoreEntries, {
      songDir     => $songDir,
      game        => $game,
      smDiff      => $smDiff,
      machineGuid => $machineGuid,
      percentDP   => $percentDP,
      epoch       => $epoch,

      songNode    => $songNode,
      stepsNode   => $stepsNode,
      scoreNode   => $scoreNode,
    };
  }
  return @scoreEntries;
}

sub reduceScoreEntries(@){
  my @scoreEntries = @_;
  my $scoreEntriesByEpoch = {};
  for my $scoreEntry(@scoreEntries){
    my $epoch = $$scoreEntry{epoch};
    if(not defined $$scoreEntriesByEpoch{$epoch}){
      $$scoreEntriesByEpoch{$epoch} = [];
    }
    push @{$$scoreEntriesByEpoch{$epoch}}, $scoreEntry;
  }

  my @reducedScoreEntries;
  for my $epoch(sort keys %$scoreEntriesByEpoch){
    my @entries = @{$$scoreEntriesByEpoch{$epoch}};

    my @uniqScoreEntries;
    if(@entries == 1){
      #skip de-dupe/reduce for performance
      @uniqScoreEntries = @entries;
    }else{
      #calculate unique score IDs
      for my $entry(@entries){
        $$entry{id} = calculateScoreEntryID($entry);
      }

      #split dupes into buckets
      my @scoreIDGroups;
      while(@entries > 0){
        my $id = ${$entries[0]}{id};
        my @group = grep {$$_{id} eq $id} @entries;
        @entries = grep {$$_{id} ne $id} @entries;
        push @scoreIDGroups, [@group];
      }

      #de-dupe, take first entry
      for my $group(@scoreIDGroups){
        my $entry = shift @$group;

        push @uniqScoreEntries, $entry;
      }
    }

    if(@uniqScoreEntries > 1){
      die "ERROR: more than one unique score entry for epoch=$epoch\n";
    }

    for my $entry(@uniqScoreEntries){
      push @reducedScoreEntries, $entry;
    }
  }

  return @reducedScoreEntries;
}

sub calculateScoreEntryID($){
  my ($scoreEntry) = @_;

  my @atts = qw(
    Grade
    PercentDP
    TapNoteScores/W1
    TapNoteScores/W2
    TapNoteScores/W3
    TapNoteScores/W4
    TapNoteScores/W5
    TapNoteScores/Miss
    TapNoteScores/AvoidMine
    TapNoteScores/HitMine
    HoldNoteScores/Held
    HoldNoteScores/LetGo
    HoldNoteScores/MissedHold
  );

  my $id = "";
  $id .= "$$scoreEntry{epoch}|";
  $id .= "$$scoreEntry{game}|";
  $id .= "$$scoreEntry{smDiff}|";
  for my $att(@atts){
    my $scoreVal = $$scoreEntry{scoreNode}->findvalue($att);
    $scoreVal = "" if not defined $scoreVal;
    if($scoreVal eq "" and $att =~ /HoldNoteScores\/MissedHold/){
      $scoreVal = 0; #some scores predate <MissedHold>, and were updated in stats but not upload
    }
    $id .= "$scoreVal|";
  }
  $id .= "$$scoreEntry{songDir}|";

  return $id;
}

sub getSingleChildByTagName($$){
  my ($node, $tagName) = @_;
  my $nodeList = $node->getChildrenByTagName($tagName);
  if($nodeList->size() == 1){
    return $nodeList->get_node(1);
  }else{
    return undef;
  }
}

#dance-single           => singles
#StepsType_Dance_Single => singles
#dance-double           => doubles
#StepsType_Dance_Double => doubles
sub convertStepsTypeToGame($){
  my ($stepsType) = @_;
  my $game = $stepsType;
  $game =~ s/^StepsType[_\-]//i;
  $game =~ s/^dance[_\-]//i;
  $game =~ s/s$//; #singles/doubles => single/double, just in case
  if($game =~ /^single$/i){
    return "singles";
  }elsif($game =~ /^double$/i){
    return "doubles";
  }else{
    die "ERROR: unknown StepsType '$stepsType'\n";
  }
}

sub assertPresent($@){
  my ($msg, @elems) = @_;
  for my $elem(@elems){
    die $msg if not $elem;
  }
}
sub assertDateTime($$){
  my ($msg, $timeXML) = @_;
  if($timeXML !~ /^\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d$/){
    die $msg;
  }
}

&main(@ARGV);
