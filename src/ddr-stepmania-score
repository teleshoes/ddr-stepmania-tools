#!/usr/bin/perl
use strict;
use warnings;
use Cwd qw(abs_path);
use File::Basename qw(basename dirname);
use lib dirname(abs_path($0));

use SMUtils::Files qw();
use SMUtils::ScoreXML qw(
  extractScoreEntriesFromScore
  parseScoreDetails
);
use SMUtils::Utils qw(
  dateFmtYMDHMS
  readFile writeFile appendFile readProc listDirFiles md5sum mtime
);

sub getDDRNAMECommand($$$);
sub checkDDRNAME($$$);
sub getScoreDataByXmlFile($$);
sub readScoreDataCache($);
sub writeScoreDataCache($$);
sub getCacheFile($);
sub calculateScoreDataCache($);
sub formatScoreData($$);
sub getSMFileFromSongDir($$);
sub getDDRSonglistLine($$$);
sub getFormattedConfigSongNameIdOverrides();
sub parseSongNameIdOverridesFile($);
sub parseSimfileDirRenamesFile($);
sub parseSimfileVersionsFile($);
sub parseXmlFile($);
sub parseSMFileSongStats($$$);
sub gameDiffKey($$);
sub getFCValue($);
sub getScoreDDRA($$);
sub getOldestXmlFileAfterMtime($);
sub assertMtimesCloseEnough($$$$);

sub getDDRAGame($);
sub getDDRADiff($);
sub getSongNameWithZeniusTool($);
sub readZeniusNameIdCache();
sub appendZeniusNameIdCache($$);

sub allFilesExist(@);
sub chunkArr($@);

my $CACHE_BASE_DIR = "$ENV{HOME}/.cache/ddr-stepmania-score";
my $ZENIUS_NAME_ID_CACHE_FILE = "$ENV{HOME}/.cache/ddr-zenius-name-id-cache";
my $SONG_NAME_ID_OVERRIDES_FILE = "$ENV{HOME}/.config/ddrname-songlist-simfile-overrides";
my $SIMFILE_DIR_RENAMES_FILE = "$ENV{HOME}/.config/stepmania-simfile-dir-renames";
my $SIMFILE_VERSIONS_FILE = "$ENV{HOME}/.config/stepmania-simfile-versions";

my $DDR_RADAR_FEET_TOOL = "ddr-radar-feet";
my $ZENIUS_TOOL = "zenius-ddrsonglist";
my $SIMFILE_RADAR_TOOL = "simfile-radar";

my $DDRNAME_TOOL = "ddrname";
my @DDRNAME_OPTS = qw(--no-check-orientation --no-banner-flash);
my $DDRNAME_MACHINE = "sm53ltekpa";
my $DDRNAME_STAGE = "0none";
my $DDRNAME_BAR = "avgbar";
my $DDRNAME_TW = "twdefault";

my $XML_MTIME_DIFF_WARNING_SECONDS = 90; #warn if image file and XML file mtimes diff is greater
my $XML_MTIME_DIFF_ERROR_SECONDS = 600; #FAIL if image file and XML file mtimes diff is greater

#  song-name-id overrides to use instead of zenius
my $CONFIG_SONG_NAME_IDS_BY_SONG_DIR_SUFFIX =
  parseSongNameIdOverridesFile($SONG_NAME_ID_OVERRIDES_FILE);
#  manual overrides of SONG_DIR, for songs that have been moved or renamed
my $CONFIG_SIMFILE_DIR_RENAMES = parseSimfileDirRenamesFile($SIMFILE_DIR_RENAMES_FILE);
#  paths to alternate SM_FILEs within a song dir, for a specific date/time range
my $CONFIG_SIMFILE_VERSIONS_BY_SONG_DIR = parseSimfileVersionsFile($SIMFILE_VERSIONS_FILE);

my $FMT_HARDCODED_SONG_NAME_IDS = getFormattedConfigSongNameIdOverrides();

my $SM_DDRA_DIFF_ARR = [
  ["Beginner"  => "beginner"],
  ["Easy"      => "basic"],
  ["Medium"    => "difficult"],
  ["Hard"      => "expert"],
  ["Expert"    => "challenge"],
  ["Challenge" => "challenge"],
  ["Edit"      => "edit"],
];
my $DDRA_DIFFICULTIES_BY_STEPMANIA_DIFFICULTY = {map {$$_[0] => $$_[1]} @$SM_DDRA_DIFF_ARR};
my @STEPMANIA_DIFFICULTIES = map {$$_[0]} @$SM_DDRA_DIFF_ARR;

my $SM_DDRA_GAMES_ARR = [
  ["dance-single" => "singles"],
  ["dance-double" => "doubles"],
  ["dance-solo"   => undef],
  ["dance-couple" => undef],
  ["pump-single"  => undef],
  ["pump-double"  => undef],
];
my $DDRA_GAMES_BY_STEPMANIA_GAME = {map {$$_[0] => $$_[1]} @$SM_DDRA_GAMES_ARR};
my @STEPMANIA_GAMES = map {$$_[0]} @$SM_DDRA_GAMES_ARR;

my $SEP = "="x50;

my $COMMAND_PRINT = "print";
my $COMMAND_DDRNAME = "ddrname";
my $COMMAND_DDRSONGLIST = "ddrsonglist";

my $SCORE_FILE_MODE_BY_FILE_EXT = "by-file-ext";
my $SCORE_FILE_MODE_DIRECT_XML = "direct-xml";
my $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME = "closest-by-mtime";

my $FILENAME_PRINT_MODE_MULTIPLE_ONLY = "multiple-only";
my $FILENAME_PRINT_MODE_ALWAYS = "always";
my $FILENAME_PRINT_MODE_NEVER = "never";

my $DEFAULT_FORMAT_SPEC = ""
  . "%SEP\n"
  . "XML_FILE:        %XML_FILE\n"
  . "SIMFILE:         %SIMFILE\n"
  . "SONG_DIR:        %SONG_DIR\n"
  . "SONG_NAME:       %SONG_NAME\n"
  . "PASS_FAIL:       %PASS_FAIL\n"
  . "DDRA_SCORE:      %DDRA_SCORE\n"
  . "PERCENT_SCORE:   %PERCENT_SCORE\n"
  . "TIMING_DATA:     %TIMING_DATA\n"
  . "FC:              %FC\n"
  . "DDRA_GAME:       %DDRA_GAME\n"
  . "DDRA_DIFFICULTY: %DDRA_DIFFICULTY\n"
  . "MODS:            %MODS\n"
  . "SM_FEET:         %SM_FEET\n"
  . "SM_RADAR:        %SM_RADAR\n"
  . "%SEP\n"
  ;

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] [COMMAND] FILE [FILE ..]
    for each FILE:
      (A) print FILE, if more than one FILE is given (or --filenames is given)
      (B) obtain XML_SCORE_FILE
        (1) if FILE ends in .xml (or --xml is gven)
              -use FILE as XML_SCORE_FILE
              -obtain SCORE_DATA from XML_SCORE_FILE
        (2) if FILE ends in .png/jpg/.jpeg/.mkv/.mp4 (or --img is given):
              -use FILE as IMG_FILE
              -take all XML score file matching $SMUtils::Files::DIR_XML_CACHE_SCORES/*.xml
              -ignore any XML files with mtime after IMG_FILE mtime
              -of the remaining, select the oldest file as XML_SCORE_FILE
      (C) obtain SCORE_DATA from XML_SCORE_FILE (see SCORE_DATA)
      (D) obtain DDRNAME_SCORE_INFO
        -fetch closest DDRNAME_SCORE_INFO from `ddrname`
        -check that the following fields in DDRNAME_SCORE_INFO match SCORE_DATA:
          -song          => SONG_NAME
          -game          => DDRA_GAME
          -difficulty    => DDRA_DIFFICULTY
          -score         => DDRA_SCORE
        -if so, extract the following fields from DDRNAME_SCORE_INFO into SCORE_DATA:
          -file          => DDRNAME_FILE
          -bar           => DDRNAME_BAR
          -note          => DDRNAME_NOTE
          -machine       => DDRNAME_MACHINE
          -timingWindows => DDRNAME_TIMING_WINDOWS
          -fc            => DDRNAME_FC
          -special       => DDRNAME_SPECIAL
          -stage         => DDRNAME_STAGE
          -quality       => DDRNAME_QUALITY
      (E) perform COMMAND
        (1) if COMMAND is --print (this is the default):
              -print SEPARATOR line
              -print each SCORE_DATA item, one per line
                -formatted: 'ITEM_NAME:   ITEM_VALUE'
                -align ITEM_VALUE whitespace
              -print SEPARATOR line
        (2) if COMMAND is --ddrname:
              -make system call:
                 $DDRNAME_TOOL \\
                   IMG_SCORE_FILE \\
                   @DDRNAME_OPTS \\
                   $DDRNAME_MACHINE \\
                   $DDRNAME_STAGE \\
                   SONG_NAME \\
                   PASS_FAIL \\
                   DDRA_SCORE \\
                   FC \\
                   DDRA_GAME \\
                   DDRA_DIFFICULTY \\
                 ;
        (3) if COMMAND is --ddrsonglist:
              -run $DDRNAME_TOOL as above with '--simulate'
              -if successful, do nothing
              -otherwise:
                -extract SONG_NAME out of SONG_DIR with `$ZENIUS_TOOL`
                -use SONG_DIR parent dir as ARTIST
                -get SONG_ABBREV from SONG_NAME + ARTIST with `$ZENIUS_TOOL`
                -extract SIMFILE from SONG_DIR
                -get DDRSONGLIST_FEET with `$DDR_RADAR_FEET_TOOL --ddrsonglist SIMFILE`
                -pad SONG_NAME to 40 characters
                -print: SONG_DIR
                -print: 'SONG_NAME |SONG_ABBREV DDRSONGLIST_FEET'
                   e.g.:
                   better-tomorrow                          |bttrTmr | --| 04| 07| 11| 14|  | --| --| --| --|

  SCORE_DATA
    (1) parse stepmania XML_SCORE_FILE, and obtain:
        -SONG_DIR       relative path to the song dir, always starts with Songs/
        -TIMING_DATA    includes counts of tap/hold/minesteps for timings like
          format as:
            FLAWLESS+PERFECT+GREAT+GOOD+BAD+MISS|HOLD_OK+HOLD_LETGO+HOLD_MISS|MINE_AVOID+MINE_HIT
            e.g.:  138+6+1+0+0+0|32+0+0|8+1
        -DATETIME       XML file mtime, formatted \"%Y-%m-%d_%H:%M:%S\" (e.g.: 2020-05-27_15:16:02)
        -DATETIME_EPOCH XML file mtime in seconds since epoch
        -PASS_FAIL      <Grade> extracted to just 'passed' or 'failed ('failed' only if 'Failed')
        -SM_GAME        <Steps> 'StepsType' att in the XML (e.g.: 'dance-single')
        -SM_DIFF        <Steps> 'Difficulty' att in the XML (e.g.: ('Hard')
        -PERCENT_SCORE  <PercentDP> (which is a ratio) times 100% (e.g.: '75.02%')
        -MODS           <Modifiers> csv value (e.g.: 'a550, Overhead')
    (2) parse SONG_NAME out of SONG_DIR, using $ZENIUS_TOOL
        -extract BASENAME_SONG_DIR (the last element of the SONG_DIR path, not including group name)
        -run `$ZENIUS_TOOL --extract-name-id BASENAME_SONG_DIR`
        -override this value for certain hardcoded SONG_DIR values
        -the following SONG_NAME values have hardcoded SONG_DIR values:
          $FMT_HARDCODED_SONG_NAME_IDS
    (3) parse SM_GAME/SM_DIFF into DDRA_GAME / DDRA_DIFFICULTY using hardcoded transforms
    (4) locate the stepmania SIMFILE (*.sm or *.ssc) in
          $SMUtils::Files::DIR_SONGS_PARENT/<SONG_DIR>/*.*
    (5) parse the SIMFILE with $SIMFILE_RADAR_TOOL
        -fetch stats for game=SM_GAME and diff=SM_DIFF:
          -DDR_HOLD_ROW_COUNTS is DDRA-style count of number of rows with holds (single/multi arrow)
            -stepmania counts multi-arrow holds as multiple holds, DDR as single holds
          -DDR_TAP_ROW_COUNTS is DDRA-style count of number of rows with taps (single/multi arrow)
            -same as TIMING_DATA; both DDR and stepmania count multi-arrow taps as single taps
          -SM_FEET is the hard-coded numeric complexity level of the SM_GAME/SM_DIFF
          -SM_RADAR is the hard-coded set of numbers representing things like stream/voltage/air/etc
    (6) calculate DDRA_SCORE score using TIMING_DATA and DDR_TAP_ROW_COUNTS/DDR_HOLD_ROW_COUNTS
        -calculate the ratio of successful holds:
          -get OK/LETGO/MISSED holds from TIMING_DATA
          -calculate the SM_HOLD_SUCCESS_RATIO: OK-holds divided by (LETGO-holds + MISSED-holds)
        -estimate the number of successful holds there would have been in DDR:
          -multiply SM_HOLD_SUCCESS_RATIO by DDR_HOLD_ROW_COUNTS to obtain ADJUSTED_OK_HOLD_COUNT
        -calculate the DDRA_SCORE as follows:
          -STEP = 1000000 / (DDR_TAP_ROW_COUNTS + DDR_HOLD_ROW_COUNTS)
          -DDRA_UNROUNDED_SCORE = 0
              + ADJUSTED_OK_HOLD_COUNT * STEP
              + FLAWLESS               * (STEP)
              + PERFECT                * (STEP-10)
              + GREAT                  * (STEP*0.6 - 10)
              + GOOD                   * (STEP*0.2 - 10)
          -DDRA_SCORE = floor(DDRA_UNROUNDED_SCORE/10)*10
    (7) calculate FC value from TIMING_DATA/PASS_FAIL:
        -'nofc' if PASS_FAIL is 'failed', or any hit mines, or any LETGO/MISSED holds
        -'nofc' if any BAD/MISS taps
        -'gfc'  if any GOOD taps       (only FLAWLESS/PERFECT/GREAT/GOOD taps, no BAD/MISS)
        -'fc'   if any GREAT taps      (only FLAWLESS/PERFECT/GREAT taps, no BAD/MISS/GOOD)
        -'pfc'  if any PERFECT taps    (only FLAWLESS/PERFECT taps, no BAD/MISS/GOOD/GREAT)
        -'mfc'  if any FLAWLESS taps   (only FLAWLESS taps, no BAD/MISS/GOOD/GREAT/PERFECT)
    (8) calculate FC_MAYBE value from FC:
        -FC_MAYBE = '' if FC is 'nofc'
        -FC_MAYBE = FC otherwise
    (9) include the following SCORE_DATA_ITEM items in SCORE_DATA:
        -XML_FILE
        -SIMFILE
        -DATETIME
        -SONG_DIR
        -SONG_NAME
        -PASS_FAIL
        -DDRA_SCORE
        -PERCENT_SCORE
        -TIMING_DATA
        -FC
        -FC_MAYBE
        -DDRA_GAME
        -DDRA_DIFFICULTY
        -MODS
        -SM_FEET
        -SM_RADAR
        -DDRNAME_FILE
        -DDRNAME_BAR
        -DDRNAME_NOTE
        -DDRNAME_MACHINE
        -DDRNAME_TIMING_WINDOWS
        -DDRNAME_FC
        -DDRNAME_SPECIAL
        -DDRNAME_STAGE
        -DDRNAME_QUALITY

  $EXEC --extract-song-name SONG_DIR
    extract SONG_NAME out of SONG_DIR, as above
  $EXEC --extract-ddra-game SM_GAME
    extract DDRA_GAME out of SM_GAME, as above
  $EXEC --extract-ddra-diff SM_DIFF
    extract DDRA_DIFFICULTY out of SM_DIFF, as above

  COMMAND
    --print
      format and print SCORE_DATA for each FILE passed in
      (this is the default if no command is given)
    --ddrname
      call `$DDRNAME_TOOL` with SCORE_DATA info on each FILE passed in
    --ddrsonglist
      extract SIMFILE, analyze it with `$ZENIUS_TOOL` and `$DDR_RADAR_FEET_TOOL`,
      and format+print info for inserting into ddrname-songlist-stepmania

  SEPARATOR
    the string: $SEP

  OPTS
    --xml
      treat all FILE args as XML_SCORE_FILE files, regardless of filename
      FILE is parsed directly as XML_SCORE_FILE, without reading mtimes
    --img | --image | --closest-by-mtime
      treat all FILE args as IMG_FILE
      mtime of IMG_FILE is used to obtain the XML_SCORE_FILE

    --check-mtime
      (this is the default)
      warn if image file and XML file mtime differ by more than ${XML_MTIME_DIFF_WARNING_SECONDS}s
      FAIL if image file and XML file mtime differ by more than ${XML_MTIME_DIFF_ERROR_SECONDS}s
    --no-check-mtime | --force-mtime | --force
      allow any amount of difference between mtimes between image file and XML file,
      without failing or warning

    --ddrname-opt=DDRNAME_OPT
      append DDRNAME_OPT to ddrname command (can be given multiple times)

    -c | --no-cache
      same as '--no-read-cache --no-write-cache'
    -w | --no-read-cache | --overwrite-cache
      skip reading from the cache (does not affect writing to the cache)
    -r | --no-write-cache | --read-only-cache
      skip writing to the cache (does not affect reading from the cache)

    --filename | --filenames
      always print FILE before parsing scoredata
      (default is to print only if more than one FILE given)
    --no-filename | --nofilename | --no-filenames | --nofilenames
      never print FILE before parsing scoredata
      (default is to print only if more than one FILE given)

    --format=FORMAT_SPEC
      instead of printing one item per line in SCORE_DATA surrounded by the SEP,
      print given format
      FORMAT_SPEC can be any string, with the following replacements:
        %%               = a literal % character
        %n               = a newline character (\\n)
        %SEP             = the SEPARATOR
        %SCORE_DATA_ITEM = replaced with the value from SCORE_DATA (e.g.: %PASS_FAIL)
";

sub main(@){
  my $cmd = $COMMAND_PRINT;
  my @files;
  my @ddrnamePassedInOpts;
  my $scoreFileMode = $SCORE_FILE_MODE_BY_FILE_EXT;
  my $filenamePrintMode = $FILENAME_PRINT_MODE_MULTIPLE_ONLY;
  my $conf = {
    checkMtimes => 1,
    readCache => 1,
    writeCache => 1,
    formatSpec => $DEFAULT_FORMAT_SPEC,
  };
  while(@_ > 0){
    my $arg = shift @_;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--extract-song-name)$/i and @_ == 1){
      my $songDir = $_[0];
      my $songName = getSongNameWithZeniusTool($songDir);
      print "$songName\n";
      exit 0;
    }elsif($arg =~ /^(--extract-ddra-game)$/i and @_ == 1){
      my $smGame = $_[0];
      my $ddraGame = getDDRAGame($smGame);
      print "$ddraGame\n";
      exit 0;
    }elsif($arg =~ /^(--extract-ddra-diff)$/i and @_ == 1){
      my $smDiff = $_[0];
      my $ddraDiff = getDDRADiff($smDiff);
      print "$ddraDiff\n";
      exit 0;
    }elsif($arg =~ /^(--print)$/i){
      $cmd = $COMMAND_PRINT;
    }elsif($arg =~ /^(--ddrname)$/i){
      $cmd = $COMMAND_DDRNAME;
    }elsif($arg =~ /^(--ddrsonglist)$/i){
      $cmd = $COMMAND_DDRSONGLIST;
    }elsif($arg =~ /^--ddrname-opt=(.+)$/i){
      push @ddrnamePassedInOpts, $1;
    }elsif($arg =~ /^(--xml)$/i){
      $scoreFileMode = $SCORE_FILE_MODE_DIRECT_XML;
    }elsif($arg =~ /^(--img|--image|--closest-by-mtime)$/i){
      $scoreFileMode = $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME;
    }elsif($arg =~ /^(--check-mtimes?)$/i){
      $$conf{checkMtimes} = 1;
    }elsif($arg =~ /^(--no-check-mtimes?|--force-mtimes?|--force)$/i){
      $$conf{checkMtimes} = 0;
    }elsif($arg =~ /^(-c|--no-cache)$/){
      $$conf{readCache} = 0;
      $$conf{writeCache} = 0;
    }elsif($arg =~ /^(-w|--no-read-cache|--overwrite-cache)$/){
      $$conf{readCache} = 0;
    }elsif($arg =~ /^(-r|--no-write-cache|--read-only-cache)$/){
      $$conf{writeCache} = 0;
    }elsif($arg =~ /^(--filenames?)$/i){
      $filenamePrintMode = $FILENAME_PRINT_MODE_ALWAYS;
    }elsif($arg =~ /^(--no-filenames?|--nofilenames?)$/i){
      $filenamePrintMode = $FILENAME_PRINT_MODE_NEVER;
    }elsif($arg =~ /^--format=(.+)$/i){
      $$conf{formatSpec} = $1;
    }elsif(-f $arg){
      push @files, $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";
    }
  }

  for my $file(@files){
    my $mode;
    if($scoreFileMode eq $SCORE_FILE_MODE_BY_FILE_EXT){
      if($file =~ /\.xml$/i){
        $mode = $SCORE_FILE_MODE_DIRECT_XML;
      }elsif($file =~ /\.(png|jpg|jpeg|mkv|mp4)$/i){
        $mode = $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME;
      }else{
        die "ERROR: unknown file type $file\n";
      }
    }else{
      $mode = $scoreFileMode;
    }

    my $xmlFile;
    if($mode eq $SCORE_FILE_MODE_DIRECT_XML){
      $xmlFile = $file;
    }elsif($mode eq $SCORE_FILE_MODE_CLOSEST_XML_BY_MTIME){
      $xmlFile = getOldestXmlFileAfterMtime mtime($file);
      if($$conf{checkMtimes}){
        assertMtimesCloseEnough($file, $xmlFile,
          $XML_MTIME_DIFF_WARNING_SECONDS, $XML_MTIME_DIFF_ERROR_SECONDS);
      }
    }else{
      die "ERROR: unknown SCORE_FILE_MODE: $mode\n";
    }

    $xmlFile = abs_path($xmlFile);

    my $sd = getScoreDataByXmlFile($conf, $xmlFile);

    if($cmd eq $COMMAND_PRINT){
      my $printFilename;
      if($filenamePrintMode eq $FILENAME_PRINT_MODE_ALWAYS){
        $printFilename = 1;
      }elsif($filenamePrintMode eq $FILENAME_PRINT_MODE_NEVER){
        $printFilename = 0;
      }elsif($filenamePrintMode eq $FILENAME_PRINT_MODE_MULTIPLE_ONLY){
        $printFilename = @files > 1;
      }else{
        die "ERROR: unknown FILENAME_PRINT_MODE: $filenamePrintMode\n";
      }

      if($printFilename){
        print "$file\n";
      }
      print formatScoreData($$conf{formatSpec}, $sd);
    }elsif($cmd eq $COMMAND_DDRNAME){
      my @cmd = getDDRNAMECommand($file, $sd, [@ddrnamePassedInOpts]);
      print "$SEP\n";
      print "@cmd\n";

      system @cmd;
      my $exitCode = $?;

      print "$SEP\n";

      if($exitCode != 0){
        my $songDir = $$sd{SONG_DIR};
        my $song = $$sd{SONG_NAME};
        my $smFile = getSMFileFromSongDir $$sd{SONG_DIR}, $$sd{DATETIME_EPOCH};
        my $songlistLine = getDDRSonglistLine($songDir, $song, $smFile);
        die "\n\nERROR: $DDRNAME_TOOL failed\n"
          . "target: $file\n"
          . "song: $song\n"
          . "xml: $xmlFile\n"
          . "sm: $smFile\n"
          . "songlist line:\n$songlistLine\n";
          ;
      }
    }elsif($cmd eq $COMMAND_DDRSONGLIST){
      my $isOk = checkDDRNAME($file, $sd, [@ddrnamePassedInOpts]);
      if(not $isOk){
        my $songDir = $$sd{SONG_DIR};
        my $song = $$sd{SONG_NAME};
        my $smFile = getSMFileFromSongDir $$sd{SONG_DIR}, $$sd{DATETIME_EPOCH};

        my $songlistLine = getDDRSonglistLine($songDir, $song, $smFile);
        print "$songDir\n";
        print "$songlistLine\n";
        print "\n";
      }
    }else{
      die "$usage\nERROR: unknown command $cmd\n";
    }
  }
}

sub getDDRNAMECommand($$$){
  my ($file, $sd, $ddrnameExtraOpts) = @_;
  return ($DDRNAME_TOOL,
    $file,
    @DDRNAME_OPTS,
    $DDRNAME_MACHINE,
    $DDRNAME_STAGE,
    $DDRNAME_BAR,
    $DDRNAME_TW,
    $$sd{SONG_NAME},
    $$sd{PASS_FAIL},
    sprintf("%06d", $$sd{DDRA_SCORE}),
    $$sd{FC},
    $$sd{DDRA_GAME},
    $$sd{DDRA_DIFFICULTY},
    @$ddrnameExtraOpts,
  );
}

sub checkDDRNAME($$$){
  my ($file, $sd, $ddrnameExtraOpts) = @_;
  push @$ddrnameExtraOpts, "--simulate";
  push @$ddrnameExtraOpts, "--quiet";
  push @$ddrnameExtraOpts, "--quiet-no-warn";

  my @cmd = getDDRNAMECommand($file, $sd, $ddrnameExtraOpts);
  system @cmd;
  my $exitCode = $?;

  if($exitCode == 0){
    return 1;
  }else{
    return 0;
  }
}

sub getScoreDataByXmlFile($$){
  my ($conf, $xmlFile) = @_;
  my $sd = undef;
  $sd = readScoreDataCache($xmlFile) if $$conf{readCache};

  my $cacheOutOfDate = 0;
  if(not defined $sd){
    $sd = calculateScoreDataCache($xmlFile);
    $cacheOutOfDate = 1;
    writeScoreDataCache($xmlFile, $sd) if $$conf{writeCache};
  }

  if(not defined $$sd{DDRNAME_FILE}){
    my $mtime = mtime($xmlFile);
    my @fieldNames = qw(
      song game difficulty score
      file
      bar note
      machine timingWindows fc special stage quality
    );

    my $ddrnameInfo = ddrnameGetClosestMtimeInfo($$sd{SONG_NAME}, $mtime, [@fieldNames]);

    #assert that the parsed XML score data matches the ddrname file
    my $ddrnameMatches = defined $ddrnameInfo
      && $$ddrnameInfo{song}       eq $$sd{SONG_NAME}
      && $$ddrnameInfo{game}       eq $$sd{DDRA_GAME}
      && $$ddrnameInfo{difficulty} eq $$sd{DDRA_DIFFICULTY}
      && $$ddrnameInfo{score}      eq $$sd{DDRA_SCORE}
    ;

    if(not $ddrnameMatches){
      print STDERR "\nWARNING: could not find `ddrname` score for xml file:\n  '$xmlFile'\n\n";
      $ddrnameInfo = undef;
    }

    if(defined $ddrnameInfo){
      $$sd{DDRNAME_FILE} = $$ddrnameInfo{file};
      $$sd{DDRNAME_BAR} = $$ddrnameInfo{bar};
      $$sd{DDRNAME_NOTE} = $$ddrnameInfo{note};
      $$sd{DDRNAME_MACHINE} = $$ddrnameInfo{machine};
      $$sd{DDRNAME_TIMING_WINDOWS} = $$ddrnameInfo{timingWindows};
      $$sd{DDRNAME_FC} = $$ddrnameInfo{fc};
      $$sd{DDRNAME_SPECIAL} = $$ddrnameInfo{special};
      $$sd{DDRNAME_STAGE} = $$ddrnameInfo{stage};
      $$sd{DDRNAME_QUALITY} = $$ddrnameInfo{quality};
      #ddrname file may have been created after reading cache
      $cacheOutOfDate = 1;
    }else{
      $$sd{DDRNAME_FILE} = "";
      $$sd{DDRNAME_BAR} = "";
      $$sd{DDRNAME_NOTE} = "";
      $$sd{DDRNAME_MACHINE} = "";
      $$sd{DDRNAME_TIMING_WINDOWS} = "";
      $$sd{DDRNAME_FC} = "";
      $$sd{DDRNAME_SPECIAL} = "";
      $$sd{DDRNAME_STAGE} = "";
      $$sd{DDRNAME_QUALITY} = "";
    }
  }

  if($$conf{writeCache} and $cacheOutOfDate){
    writeScoreDataCache($xmlFile, $sd);
  }

  return $sd;
}

sub ddrnameGetClosestMtimeInfo($$$){
  my ($song, $mtime, $fieldNamesArr) = @_;

  my @fieldNames = @$fieldNamesArr;
  my $fmt = join "###", map {"%{$_}"} @fieldNames;
  my @ddrnameCmd = ("ddrname", "--scorestats",
    "--no-group-buckets",
    "--format", "$fmt",
    "--song", $song,
    "--passfail",
    "--closest-mtime", "$mtime",
  );

  my @lines = readProc @ddrnameCmd;
  if(@lines == 0){
    return undef;
  }elsif(@lines > 1){
    die "ERROR: too many scores returned by @ddrnameCmd\n@lines";
  }else{
    my $line = $lines[0];
    my @fieldVals = split "###", $line, -1;
    if($#fieldNames != $#fieldVals){
      die "ERROR: malformed output of @ddrnameCmd\n@lines";
    }
    my $info = {};
    for(my $i=0; $i<@fieldNames; $i++){
      my $fieldName = $fieldNames[$i];
      my $fieldVal = $fieldVals[$i];
      $$info{$fieldName} = $fieldVal;
    }
    return $info;
  }
}
sub readScoreDataCache($){
  my ($xmlFile) = @_;
  my $sd = undef;
  my $cacheFile = getCacheFile($xmlFile);
  if(not -f $cacheFile){
    return undef;
  }

  my @lines = readFile($cacheFile);

  for my $line(@lines){
    next if $line =~ /^\s*$/;
    if($line =~ /^(\w+)=(.*)$/){
      my ($key, $val) = ($1, $2);
      $$sd{$key} = $val;
    }else{
      die "ERROR: invalid line in cache $cacheFile\n$line";
    }
  }

  if(not defined $$sd{SIMFILE}){
    $$sd{SIMFILE} = getSMFileFromSongDir $$sd{SONG_DIR}, $$sd{DATETIME_EPOCH};
  }

  my $xmlMtime = mtime($xmlFile);
  $$sd{XML_FILE} = $xmlFile;
  $$sd{DATETIME} = dateFmtYMDHMS($xmlMtime);
  $$sd{DATETIME_EPOCH} = $xmlMtime;

  return $sd;
}
sub writeScoreDataCache($$){
  my ($xmlFile, $sd) = @_;
  my $cacheFile = getCacheFile($xmlFile);
  system "mkdir", "-p", $CACHE_BASE_DIR if not -d $CACHE_BASE_DIR;
  my $contents = join("", map {"$_=$$sd{$_}\n"} sort keys %$sd);
  writeFile($cacheFile, $contents);
}

sub getCacheFile($){
  my ($xmlFile) = @_;
  my $fileName = $xmlFile;
  $fileName =~ s/^.*\///;
  $fileName =~ s/\.\w+$//;
  $fileName = lc $fileName;
  $fileName =~ s/[^a-zA-Z0-9\-]+/-/g;
  $fileName =~ s/--+/-/g;
  $fileName =~ s/^--*//g;
  $fileName =~ s/--*$//g;

  my $md5sum = md5sum $xmlFile;
  my $cacheFile = "$CACHE_BASE_DIR/$fileName-$md5sum";
  return $cacheFile;
}

sub calculateScoreDataCache($){
  my ($xmlFile) = @_;
  my $xmlMtime = mtime($xmlFile);
  my $xmlInfo = parseXmlFile $xmlFile;
  my $songDir = $$xmlInfo{songDir};
  my $gameDiffKey = gameDiffKey($$xmlInfo{game}, $$xmlInfo{difficulty});
  my $smFile = getSMFileFromSongDir $songDir, $xmlMtime;
  my $songStats = parseSMFileSongStats(
    $smFile, $$xmlInfo{game}, $$xmlInfo{difficulty});

  my $songName = getSongNameWithZeniusTool $songDir;
  my $ddraScore = getScoreDDRA($xmlInfo, $songStats);
  my $fc = getFCValue($xmlInfo);

  return {
    XML_FILE        => $xmlFile,
    SIMFILE         => $smFile,
    DATETIME        => dateFmtYMDHMS($xmlMtime),
    DATETIME_EPOCH  => $xmlMtime,
    SONG_DIR        => $songDir,
    SONG_NAME       => $songName,
    PASS_FAIL       => $$xmlInfo{passFail},
    DDRA_SCORE      => $ddraScore,
    PERCENT_SCORE   => $$xmlInfo{percentScore},
    TIMING_DATA     => $$xmlInfo{timingData},
    FC              => $fc,
    FC_MAYBE        => $fc =~ /^(nofc)$/i ? "" : $fc,
    DDRA_GAME       => getDDRAGame($$xmlInfo{game}),
    DDRA_DIFFICULTY => getDDRADiff($$xmlInfo{difficulty}),
    MODS            => $$xmlInfo{mods},
    SM_FEET         => $$songStats{SM_FEET},
    SM_RADAR        => $$songStats{SM_RADAR},
  };
}

sub formatScoreData($$){
  my ($formatSpec, $sd) = @_;

  my $s = $formatSpec;
  $s =~ s/&/&amp;/g;
  $s =~ s/%%/&boing;/g;

  $s =~ s/%n/\n/g;
  $s =~ s/%SEP/$SEP/g;

  for my $scoreDataItem(sort {length $b <=> length $a} keys %$sd){
    my $val = $$sd{$scoreDataItem};
    $val =~ s/&/&amp;/g;
    $val =~ s/%/&boing;/g;
    $s =~ s/\%$scoreDataItem/$val/g;
  }

  if($s =~ /%/){
    die "ERROR: format-spec contains unknown replacement var \"$formatSpec\"\n";
  }

  $s =~ s/&boing;/%/g;
  $s =~ s/&amp;/&/g;

  return $s;
}

sub getSMFileFromSongDir($$){
  my ($songDir, $epoch) = @_;

  if($songDir !~ /^Songs\/.*\/$/){
    die "ERROR: song dir must start with 'Songs/' and end with '/' ($songDir)\n";
  }

  my $songAbsDir = "$SMUtils::Files::DIR_SONGS_PARENT/$songDir";

  if(not -d "$songAbsDir"){
    if(defined $$CONFIG_SIMFILE_DIR_RENAMES{$songDir}){
      $songDir = $$CONFIG_SIMFILE_DIR_RENAMES{$songDir};
      $songAbsDir = "$SMUtils::Files::DIR_SONGS_PARENT/$songDir";
      if(not -d "$songAbsDir"){
        die "ERROR: renamed song dir '$songAbsDir' also does not exist\n";
      }
    }
  }

  if(not -d "$songAbsDir"){
    die "ERROR: song dir '$songAbsDir' does not exist\n";
  }

  if(defined $$CONFIG_SIMFILE_VERSIONS_BY_SONG_DIR{$songDir}){
    #use older version of simfile if configured
    my @versions = @{$$CONFIG_SIMFILE_VERSIONS_BY_SONG_DIR{$songDir}};
    for my $v(@versions){
      if($$v{startEpoch} <= $epoch && $epoch <= $$v{endEpoch}){
        die "$$v{startEpoch}   $epoch   $$v{endEpoch}\n";
        return $$v{absSMFile};
      }
    }
  }else{
    #find the first SM/SSC file directly underneath SONG_DIR
    my @smFiles = grep {$_ =~ /\.(ssc|sm)$/i} listDirFiles $songAbsDir;
    die "ERROR: could not find SSC or SM file in $songAbsDir\n" if @smFiles == 0;
    return $smFiles[0];
  }
}

sub getDDRSonglistLine($$$){
  my ($songDir, $song, $smFile) = @_;

  my $songParentDir = dirname $songDir;
  my $artist = basename $songParentDir;

  my $abbrev = readProc("$ZENIUS_TOOL", "--abbrev", $song, $artist);
  chomp $abbrev;
  if($abbrev !~ /^[a-zA-Z0-9]{7}$/){
    die "ERROR: could not obtain abbrev for song=$song\n";
  }

  my $songlistFeet = readProc($DDR_RADAR_FEET_TOOL, "--ddrsonglist", $smFile);
  chomp $songlistFeet;

  return sprintf "%-40s |%s %s", $song, $abbrev, $songlistFeet;
}

sub getFormattedConfigSongNameIdOverrides(){
  return join "\n        ", map {join " ", @$_}
    chunkArr(3, sort values %$CONFIG_SONG_NAME_IDS_BY_SONG_DIR_SUFFIX);
}

sub parseSongNameIdOverridesFile($){
  my ($file) = @_;
  my @lines;
  if(-f $file){
    @lines = readFile($file);
  }
  my $songNameIdsBySongDirSuffix = {};
  for my $line(@lines){
    next if $line =~ /^\s*$/ or $line =~ /^\s*#/;
    if($line =~ /^([a-zA-Z0-9\-]+)\s*\|\s*(.+)$/){
      my ($songNameId, $songDirSuffix) = ($1, $2);
      $$songNameIdsBySongDirSuffix{$songDirSuffix} = $songNameId;
    }else{
      die "ERROR: malformed line in song name ID overrides\n$line";
    }
  }
  return $songNameIdsBySongDirSuffix;
}

sub parseSimfileDirRenamesFile($){
  my ($file) = @_;
  my @lines;
  if(-f $file){
    @lines = readFile($file);
  }

  my $simfileDirRenames = {};
  my $orig = undef;
  for my $line(@lines){
    next if $line =~ /^\s*$/ or $line =~ /^\s*#/;
    if($line =~ /^\s*=>\s*(\S.*)$/){
      my $repl = $1;
      if(not defined $orig){
        die "ERROR: malformed simfile dir renames file $file\n";
      }
      chomp $orig;
      chomp $repl;
      if($orig !~ /^Songs\// or $repl !~ /^Songs\//){
        die "ERROR: simfile dir renames must start with 'Songs/'\n";
      }elsif($orig !~ /\/$/ or $repl !~ /\/$/){
        die "ERROR: simfile dir renames must end with '/'\n";
      }
      $$simfileDirRenames{$orig} = $repl;
      $orig = undef;
    }else{
      if(defined $orig){
        die "ERROR: malformed simfile dir renames file $file\n";
      }
      $orig = $line;
    }
  }
  return $simfileDirRenames;
}

sub parseSimfileVersionsFile($){
  my ($file) = @_;
  my @lines;
  if(-f $file){
    @lines = readFile($file);
  }

  my $simfileVersionsBySongDir = {};
  for my $line(@lines){
    chomp $line;
    next if $line =~ /^\s*$/ or $line =~ /^\s*#/;
    if($line =~ /^\s*(\d+)\s*:\s*(\d+)\s*:\s*(Songs\/[^:]*\/)\s*:\s*([^:]+)$/){
      my ($startEpoch, $endEpoch, $songDir, $relSMFile) = ($1, $2, $3, $4);

      my $absDir = "$SMUtils::Files::DIR_SONGS_PARENT/$songDir";
      $absDir =~ s/\/$//;
      my $absSMFile = "$absDir/$relSMFile";
      if(not -f $absSMFile){
        die "ERROR: could not find SM_FILE version $absSMFile\n";
      }

      if(not defined $$simfileVersionsBySongDir{$songDir}){
        $$simfileVersionsBySongDir{$songDir} = [];
      }
      push @{$$simfileVersionsBySongDir{$songDir}}, {
        startEpoch => $startEpoch,
        endEpoch   => $endEpoch,
        songDir    => $songDir,
        absSMFile  => $absSMFile,
      };
    }else{
      die "ERROR: malformed versions line in $file\n$line\n";
    }
  }
  return $simfileVersionsBySongDir;
}

sub parseXmlFile($){
  my ($xmlFile) = @_;
  my @scoreEntries = extractScoreEntriesFromScore($xmlFile);
  die "ERROR: no score entries found in $xmlFile\n" if @scoreEntries == 0;
  die "ERROR: multiple score entries found in $xmlFile\n" if @scoreEntries > 1;

  my $scoreEntry = $scoreEntries[0];
  parseScoreDetails($scoreEntry);

  my $sd = $$scoreEntry{scoreDetails};

  my $info = {
    songDir            => $$scoreEntry{songDir},
    difficulty         => $$scoreEntry{smDiff},
    game               => $$scoreEntry{game},
    mods               => $$sd{mods},

    grade              => $$sd{grade},
    percentDP          => $$sd{percentDP},
    surviveSeconds     => $$sd{surviveSeconds},
    maxCombo           => $$sd{maxCombo},

    mineOk             => $$sd{countAvoidMine},
    mineHit            => $$sd{countHitMine},

    holdOk             => $$sd{countHeld},
    holdLetGo          => $$sd{countLetGo},
    holdMissed         => $$sd{countMissedHold},

    flawless           => $$sd{countW1},
    perfect            => $$sd{countW2},
    great              => $$sd{countW3},
    good               => $$sd{countW4},
    bad                => $$sd{countW5},
    miss               => $$sd{countMiss},
  };

  my @requiredAtts = qw(
    songDir difficulty game grade percentDP
    holdOk holdLetGo holdMissed
    mineOk mineHit
    flawless perfect great good bad miss
  );

  for my $att(@requiredAtts){
    die "ERROR: could not parse '$att' in $xmlFile\n" if not defined $$info{$att};
  }

  if($$info{songDir} !~ /^Songs\/.*\/$/){
    die "ERROR: song dir must start with 'Songs/' and end with '/' ($xmlFile)\n";
  }

  $$info{timingData} = sprintf("%d+%d+%d+%d+%d+%d|%d+%d+%d|%d+%d",
    $$info{flawless},
    $$info{perfect},
    $$info{great},
    $$info{good},
    $$info{bad},
    $$info{miss},
    $$info{holdOk},
    $$info{holdLetGo},
    $$info{holdMissed},
    $$info{mineOk},
    $$info{mineHit},
  );

  if(defined $$info{percentDP}){
    #percentDP is a ratio in the XML...
    $$info{percentScore} = sprintf("%.2f", ($$info{percentDP} * 100.0)) . "%";
  }

  $$info{passFail} = $$info{grade} =~ /failed/i ? "failed" : "passed";

  return $info;
}

sub parseSMFileSongStats($$$){
  my ($smFile, $game, $diff) = @_;
  my @fieldNames = qw(COUNT_NOTE_ROWS COUNT_HOLD_ROWS SM_FEET SM_RADAR);
  my $fieldNameFmt = join "###", map {"%$_"} @fieldNames;

  my @simfileRadarCmd = ($SIMFILE_RADAR_TOOL,
    "--game=$game",
    "--diff-sm=$diff",
    "--format=$fieldNameFmt",
    $smFile,
  );
  my $out = readProc @simfileRadarCmd;
  chomp $out;

  my @fieldVals = split /###/, $out, -1;
  if($#fieldNames != $#fieldVals){
    die "ERROR: failed to parse fields of @simfileRadarCmd\n";
  }
  my $songStats = { map {$fieldNames[$_] => $fieldVals[$_]} (0..$#fieldNames) };
  return $songStats;
}

sub gameDiffKey($$){
  my ($game, $diff) = @_;
  return lc "$game-$diff";
}

sub getFCValue($){
  my ($xmlInfo) = @_;

  my $fc;

  if($$xmlInfo{passFail} =~ /failed/i){
    $fc = undef;
  }if($$xmlInfo{holdLetGo} > 0 or $$xmlInfo{holdMissed} > 0){
    $fc = undef;
  }elsif($$xmlInfo{mineHit} > 0){
    $fc = undef;
  }elsif($$xmlInfo{miss} > 0 or $$xmlInfo{bad} > 0){
    $fc = undef;
  }elsif($$xmlInfo{good} > 0){
    $fc = "gfc";
  }elsif($$xmlInfo{great} > 0){
    $fc = "fc";
  }elsif($$xmlInfo{perfect} > 0){
    $fc = "pfc";
  }elsif($$xmlInfo{flawless} > 0){
    $fc = "mfc";
  }else{
    $fc = undef;
  }

  $fc = "nofc" if not defined $fc;

  return $fc;
}

sub getScoreDDRA($$){
  my ($xmlInfo, $songStats) = @_;
  my $step = 1000000 / ($$songStats{COUNT_NOTE_ROWS}+$$songStats{COUNT_HOLD_ROWS});

  my $xmlHoldsOk = $$xmlInfo{holdOk};
  my $xmlHoldsTotal = ($$xmlInfo{holdOk} + $$xmlInfo{holdLetGo} + $$xmlInfo{holdMissed});
  my $xmlHoldsRatio = $xmlHoldsTotal == 0 ? 0 : $xmlHoldsOk / $xmlHoldsTotal;

  my $adjustedHolds = int($$songStats{COUNT_HOLD_ROWS} * $xmlHoldsRatio);

  my $score = 0;
  $score += $adjustedHolds      * $step;
  $score += $$xmlInfo{flawless} * $step;
  $score += $$xmlInfo{perfect}  * ($step-10);
  $score += $$xmlInfo{great}    * (($step*0.6)-10);
  $score += $$xmlInfo{good}     * (($step*0.2)-10);
  $score = int($score/10) * 10;
  return $score;
}

sub getOldestXmlFileAfterMtime($){
  my ($targetMtime) = @_;

  my @xmlFiles = glob "$SMUtils::Files::DIR_XML_CACHE_SCORES/*.xml";
  my %mtimes = map {$_ => mtime $_} @xmlFiles;
  @xmlFiles = sort {$mtimes{$a} <=> $mtimes{$b}} @xmlFiles;

  my $closestXmlFile;
  for my $xmlFile(@xmlFiles){
    my $xmlMtime = $mtimes{$xmlFile};
    if($targetMtime < $xmlMtime){
      last;
    }
    $closestXmlFile = $xmlFile;
  }

  return $closestXmlFile;
}

sub assertMtimesCloseEnough($$$$){
  my ($file1, $file2, $warningMtimeDiffS, $errorMtimeDiffS) = @_;
  my $mtime1 = mtime $file1;
  my $mtime2 = mtime $file2;

  my $mtimeDiff = $mtime1 - $mtime2;
  $mtimeDiff = 0-$mtimeDiff if $mtimeDiff < 0;

  if($mtimeDiff > $errorMtimeDiffS){
    die sprintf "\n\nERROR: mtime is more than %ds (%ds) away\n  %s\n  vs\n  %s\n",
      $errorMtimeDiffS, $mtimeDiff, $file1, $file2;
  }elsif($mtimeDiff > $warningMtimeDiffS){
    printf "\n\nWARNING: mtime is more than %ds (%ds) away\n  %s\n  vs\n  %s\n",
      $warningMtimeDiffS, $mtimeDiff, $file1, $file2;
  }
}

sub getDDRAGame($){
  my ($smGame) = @_;
  my $ddraGame = $$DDRA_GAMES_BY_STEPMANIA_GAME{$smGame};
  $ddraGame = $smGame if not defined $ddraGame;
  return $ddraGame;
}

sub getDDRADiff($){
  my ($smDiff) = @_;
  my $ddraDiff = $$DDRA_DIFFICULTIES_BY_STEPMANIA_DIFFICULTY{$smDiff};
  $ddraDiff = $smDiff if not defined $ddraDiff;
  return $ddraDiff;
}

sub getSongNameWithZeniusTool($){
  my ($songDir) = @_;
  for my $songDirSuffix(sort keys %$CONFIG_SONG_NAME_IDS_BY_SONG_DIR_SUFFIX){
    if($songDir =~ /(^|\/)\Q$songDirSuffix\E\/*$/){
      return $$CONFIG_SONG_NAME_IDS_BY_SONG_DIR_SUFFIX{$songDirSuffix};
    }
  }
  my $subDir = $songDir;
  $subDir =~ s/\/+$//g;
  $subDir =~ s/.*\///;

  my $cache = readZeniusNameIdCache();
  if(defined $$cache{$subDir}){
    return $$cache{$subDir};
  }

  my $songName = readProc($ZENIUS_TOOL, "--extract-name-id", $subDir);
  chomp $songName;

  if($songName =~ /^[a-z0-9\-]+$/){
    appendZeniusNameIdCache($songName, $subDir);
    return $songName;
  }else{
    die "ERROR: could not extract song name from song dir: $songDir\n";
  }
}
sub readZeniusNameIdCache(){
  my $cache = {};

  my @lines;
  if(-f $ZENIUS_NAME_ID_CACHE_FILE){
    @lines = readFile($ZENIUS_NAME_ID_CACHE_FILE);
  }

  for my $line(@lines){
    if($line =~ /^([a-z0-9\-]+):(.+)$/){
      $$cache{$2} = $1;
    }else{
      die "ERROR: malformed line in $ZENIUS_NAME_ID_CACHE_FILE\n$line";
    }
  }

  return $cache;
}
sub appendZeniusNameIdCache($$){
  my ($songName, $query) = @_;
  appendFile($ZENIUS_NAME_ID_CACHE_FILE, "$songName:$query\n");
}

sub allFilesExist(@){
  for my $file(@_){
    return 0 if not -f $file;
  }
  return 1;
}

sub chunkArr($@){
  my ($chunkSize, @arr) = @_;
  my @chunkArr;
  my $chunk = undef;
  for my $elem(@arr){
    if(defined $chunk and @$chunk >= $chunkSize){
      $chunk = undef;
    }
    if(not defined $chunk){
      $chunk = [];
      push @chunkArr, $chunk;
    }
    push @$chunk, $elem;
  }
  return @chunkArr;
}

&main(@ARGV);
